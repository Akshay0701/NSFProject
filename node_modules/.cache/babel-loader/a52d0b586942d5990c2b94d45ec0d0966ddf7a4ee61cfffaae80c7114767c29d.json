{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nconst useProfileStore = create(persist(set => ({\n  profiles: [],\n  extractedProfiles: [],\n  teams: [],\n  teamsWithProposals: [],\n  isLoading: false,\n  isCreatingTeams: false,\n  isGeneratingProposals: false,\n  addProfile: () => set(state => ({\n    profiles: [...state.profiles, {\n      name: '',\n      affiliation: '',\n      researchArea: '',\n      text: '',\n      pdfFile: null\n    }]\n  })),\n  removeProfile: index => set(state => ({\n    profiles: state.profiles.filter((_, i) => i !== index)\n  })),\n  updateProfile: (index, updatedProfile) => set(state => {\n    const newProfiles = [...state.profiles];\n    newProfiles[index] = updatedProfile;\n    return {\n      profiles: newProfiles\n    };\n  }),\n  setExtractedProfiles: profiles => set({\n    extractedProfiles: profiles\n  }),\n  setTeams: teams => set({\n    teams\n  }),\n  setTeamsWithProposals: teams => set({\n    teamsWithProposals: teams\n  }),\n  setIsLoading: loading => set({\n    isLoading: loading\n  }),\n  setIsCreatingTeams: creating => set({\n    isCreatingTeams: creating\n  }),\n  setIsGeneratingProposals: generating => set({\n    isGeneratingProposals: generating\n  })\n}), {\n  name: 'profile-storage',\n  // Key for localStorage\n  storage: {\n    getItem: name => {\n      const value = localStorage.getItem(name);\n      return value ? JSON.parse(value) : null;\n    },\n    setItem: (name, value) => {\n      localStorage.setItem(name, JSON.stringify(value));\n    },\n    removeItem: name => {\n      localStorage.removeItem(name);\n    }\n  }\n}));\nexport default useProfileStore;","map":{"version":3,"names":["create","persist","useProfileStore","set","profiles","extractedProfiles","teams","teamsWithProposals","isLoading","isCreatingTeams","isGeneratingProposals","addProfile","state","name","affiliation","researchArea","text","pdfFile","removeProfile","index","filter","_","i","updateProfile","updatedProfile","newProfiles","setExtractedProfiles","setTeams","setTeamsWithProposals","setIsLoading","loading","setIsCreatingTeams","creating","setIsGeneratingProposals","generating","storage","getItem","value","localStorage","JSON","parse","setItem","stringify","removeItem"],"sources":["/Users/akshayjadhav/Documents/GAWork/NSFProject/src/store/profileStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nconst useProfileStore = create(\n  persist(\n    (set) => ({\n      profiles: [],\n      extractedProfiles: [],\n      teams: [],\n      teamsWithProposals: [],\n      isLoading: false,\n      isCreatingTeams: false,\n      isGeneratingProposals: false,\n\n      addProfile: () =>\n        set((state) => ({\n          profiles: [\n            ...state.profiles,\n            {\n              name: '',\n              affiliation: '',\n              researchArea: '',\n              text: '',\n              pdfFile: null,\n            },\n          ],\n        })),\n\n      removeProfile: (index) =>\n        set((state) => ({\n          profiles: state.profiles.filter((_, i) => i !== index),\n        })),\n\n      updateProfile: (index, updatedProfile) =>\n        set((state) => {\n          const newProfiles = [...state.profiles];\n          newProfiles[index] = updatedProfile;\n          return { profiles: newProfiles };\n        }),\n\n      setExtractedProfiles: (profiles) => set({ extractedProfiles: profiles }),\n      setTeams: (teams) => set({ teams }),\n      setTeamsWithProposals: (teams) => set({ teamsWithProposals: teams }),\n      setIsLoading: (loading) => set({ isLoading: loading }),\n      setIsCreatingTeams: (creating) => set({ isCreatingTeams: creating }),\n      setIsGeneratingProposals: (generating) =>\n        set({ isGeneratingProposals: generating }),\n    }),\n    {\n      name: 'profile-storage', // Key for localStorage\n      storage: {\n        getItem: (name) => {\n          const value = localStorage.getItem(name);\n          return value ? JSON.parse(value) : null;\n        },\n        setItem: (name, value) => {\n          localStorage.setItem(name, JSON.stringify(value));\n        },\n        removeItem: (name) => {\n          localStorage.removeItem(name);\n        },\n      },\n    }\n  )\n);\n\nexport default useProfileStore;"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,QAAQ,oBAAoB;AAE5C,MAAMC,eAAe,GAAGF,MAAM,CAC5BC,OAAO,CACJE,GAAG,KAAM;EACRC,QAAQ,EAAE,EAAE;EACZC,iBAAiB,EAAE,EAAE;EACrBC,KAAK,EAAE,EAAE;EACTC,kBAAkB,EAAE,EAAE;EACtBC,SAAS,EAAE,KAAK;EAChBC,eAAe,EAAE,KAAK;EACtBC,qBAAqB,EAAE,KAAK;EAE5BC,UAAU,EAAEA,CAAA,KACVR,GAAG,CAAES,KAAK,KAAM;IACdR,QAAQ,EAAE,CACR,GAAGQ,KAAK,CAACR,QAAQ,EACjB;MACES,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE,EAAE;MAChBC,IAAI,EAAE,EAAE;MACRC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC,CAAC,CAAC;EAELC,aAAa,EAAGC,KAAK,IACnBhB,GAAG,CAAES,KAAK,KAAM;IACdR,QAAQ,EAAEQ,KAAK,CAACR,QAAQ,CAACgB,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKH,KAAK;EACvD,CAAC,CAAC,CAAC;EAELI,aAAa,EAAEA,CAACJ,KAAK,EAAEK,cAAc,KACnCrB,GAAG,CAAES,KAAK,IAAK;IACb,MAAMa,WAAW,GAAG,CAAC,GAAGb,KAAK,CAACR,QAAQ,CAAC;IACvCqB,WAAW,CAACN,KAAK,CAAC,GAAGK,cAAc;IACnC,OAAO;MAAEpB,QAAQ,EAAEqB;IAAY,CAAC;EAClC,CAAC,CAAC;EAEJC,oBAAoB,EAAGtB,QAAQ,IAAKD,GAAG,CAAC;IAAEE,iBAAiB,EAAED;EAAS,CAAC,CAAC;EACxEuB,QAAQ,EAAGrB,KAAK,IAAKH,GAAG,CAAC;IAAEG;EAAM,CAAC,CAAC;EACnCsB,qBAAqB,EAAGtB,KAAK,IAAKH,GAAG,CAAC;IAAEI,kBAAkB,EAAED;EAAM,CAAC,CAAC;EACpEuB,YAAY,EAAGC,OAAO,IAAK3B,GAAG,CAAC;IAAEK,SAAS,EAAEsB;EAAQ,CAAC,CAAC;EACtDC,kBAAkB,EAAGC,QAAQ,IAAK7B,GAAG,CAAC;IAAEM,eAAe,EAAEuB;EAAS,CAAC,CAAC;EACpEC,wBAAwB,EAAGC,UAAU,IACnC/B,GAAG,CAAC;IAAEO,qBAAqB,EAAEwB;EAAW,CAAC;AAC7C,CAAC,CAAC,EACF;EACErB,IAAI,EAAE,iBAAiB;EAAE;EACzBsB,OAAO,EAAE;IACPC,OAAO,EAAGvB,IAAI,IAAK;MACjB,MAAMwB,KAAK,GAAGC,YAAY,CAACF,OAAO,CAACvB,IAAI,CAAC;MACxC,OAAOwB,KAAK,GAAGE,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC,GAAG,IAAI;IACzC,CAAC;IACDI,OAAO,EAAEA,CAAC5B,IAAI,EAAEwB,KAAK,KAAK;MACxBC,YAAY,CAACG,OAAO,CAAC5B,IAAI,EAAE0B,IAAI,CAACG,SAAS,CAACL,KAAK,CAAC,CAAC;IACnD,CAAC;IACDM,UAAU,EAAG9B,IAAI,IAAK;MACpByB,YAAY,CAACK,UAAU,CAAC9B,IAAI,CAAC;IAC/B;EACF;AACF,CACF,CACF,CAAC;AAED,eAAeX,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}