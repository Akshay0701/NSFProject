{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport computingService from '../services/computingService';\nimport roomService from '../services/roomService';\nconst useProfilePage = () => {\n  _s();\n  const {\n    roomId\n  } = useParams();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [room, setRoom] = useState(null);\n  const [isCreatingTeams, setIsCreatingTeams] = useState(false);\n  const userEmail = localStorage.getItem('userEmail');\n  const createTeams = async roomID => {\n    setIsCreatingTeams(true);\n    try {\n      const data = await roomService.createTeamsFromRoom(roomID);\n      toast.success('Teams created successfully!');\n      navigate(`/room/${roomID}/teams`);\n      return data;\n    } catch (err) {\n      console.error('Create teams error:', err);\n      toast.error(err.message || 'Failed to create teams');\n    } finally {\n      setIsCreatingTeams(false);\n    }\n  };\n  const updateResearchTopicsForUser = useCallback(async (email, updatedKeywordsList) => {\n    try {\n      const response = await computingService.updateResearchTopicsForUser(roomId, email, updatedKeywordsList);\n      loadRoom();\n      return response;\n    } catch (err) {\n      toast.error(err.message || 'Update failed');\n      return null;\n    }\n  }, []);\n  const fetchRoomData = useCallback(async roomId => {\n    try {\n      const data = await roomService.getRoomData(roomId);\n      console.log('data at useRoom page:', data);\n      return data;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load room data.');\n      return null;\n    }\n  }, []);\n  const loadRoom = useCallback(async () => {\n    setLoading(true);\n    const data = await fetchRoomData(roomId);\n    setRoom(data);\n    setLoading(false);\n  }, [fetchRoomData, roomId]);\n  const handleGenerateTeams = useCallback(async () => {\n    if (!roomId) return;\n    await createTeams(roomId);\n  }, [roomId, createTeams]);\n  useEffect(() => {\n    loadRoom();\n  }, [loadRoom]);\n  return {\n    loading,\n    room,\n    roomId,\n    userEmail,\n    navigate,\n    isCreatingTeams,\n    handleGenerateTeams,\n    updateResearchTopicsForUser\n  };\n};\n_s(useProfilePage, \"qQsvj8MkGIUsuAgE+FKhAxkmFvU=\", false, function () {\n  return [useParams, useNavigate];\n});\nexport default useProfilePage;","map":{"version":3,"names":["useCallback","useEffect","useState","useNavigate","useParams","toast","computingService","roomService","useProfilePage","_s","roomId","navigate","loading","setLoading","room","setRoom","isCreatingTeams","setIsCreatingTeams","userEmail","localStorage","getItem","createTeams","roomID","data","createTeamsFromRoom","success","err","console","error","message","updateResearchTopicsForUser","email","updatedKeywordsList","response","loadRoom","fetchRoomData","getRoomData","log","handleGenerateTeams"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/hooks/useProfilePage.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport computingService from '../services/computingService';\nimport roomService from '../services/roomService';\n\n\nconst useProfilePage = () => {\n  const { roomId } = useParams();\n  const navigate = useNavigate();\n\n  const [loading, setLoading] = useState(true);\n  const [room, setRoom] = useState(null);\n  const [isCreatingTeams, setIsCreatingTeams] = useState(false);\n\n  const userEmail = localStorage.getItem('userEmail');\n\n  const createTeams = async (roomID) => {\n    setIsCreatingTeams(true);\n    try {\n      const data = await roomService.createTeamsFromRoom(roomID);\n      toast.success('Teams created successfully!');\n      navigate(`/room/${roomID}/teams`);\n      return data;\n    } catch (err) {\n      console.error('Create teams error:', err);\n      toast.error(err.message || 'Failed to create teams');\n    } finally {\n      setIsCreatingTeams(false);\n    }\n  };\n\n  const updateResearchTopicsForUser = useCallback(async (email, updatedKeywordsList) => {\n    try {\n      const response = await computingService.updateResearchTopicsForUser(roomId, email, updatedKeywordsList);\n      loadRoom();\n      return response;\n    } catch (err) {\n      toast.error(err.message || 'Update failed');\n      return null;\n    }\n  }, []); \n\n  const fetchRoomData = useCallback(async (roomId) => {\n    try {\n      const data = await roomService.getRoomData(roomId);\n      console.log('data at useRoom page:', data);\n      return data;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load room data.');\n      return null;\n    }\n  }, []);\n\n\n  const loadRoom = useCallback(async () => {\n    setLoading(true);\n    const data = await fetchRoomData(roomId);\n    setRoom(data);\n    setLoading(false);\n  }, [fetchRoomData, roomId]);\n\n  const handleGenerateTeams = useCallback(async () => {\n    if (!roomId) return;\n    await createTeams(roomId);\n  }, [roomId, createTeams]);\n\n  useEffect(() => {\n    loadRoom();\n  }, [loadRoom]);\n\n  return {\n    loading,\n    room,\n    roomId,\n    userEmail,\n    navigate,\n    isCreatingTeams,\n    handleGenerateTeams,\n    updateResearchTopicsForUser\n  };\n};\n\nexport default useProfilePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}