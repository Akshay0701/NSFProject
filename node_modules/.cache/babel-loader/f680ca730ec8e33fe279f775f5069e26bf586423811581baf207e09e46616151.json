{"ast":null,"code":"import{useCallback,useEffect,useState}from'react';import{useNavigate,useParams}from'react-router-dom';import{toast}from'react-toastify';import computingService from'../services/computingService';import roomService from'../services/roomService';const useProfilePage=()=>{const{roomId}=useParams();const navigate=useNavigate();const[profiles,setProfiles]=useState([]);const[isCreatingTeams,setIsCreatingTeams]=useState(false);const createTeams=async roomID=>{setIsCreatingTeams(true);try{const data=await roomService.createTeamsFromRoom(roomID);toast.success('Teams created successfully!');navigate(`/room/${roomID}/teams`);return data;}catch(err){console.error('Create teams error:',err);toast.error(err.message||'Failed to create teams');}finally{setIsCreatingTeams(false);}};const fetchExtractedKeywords=useCallback(async roomID=>{try{const data=await computingService.getExtractedKeywords(roomID);return data||[];}catch(error){console.error('Error fetching extracted keywords:',error);toast.error('Failed to fetch extracted keywords.');return[];}},[]);const loadProfiles=useCallback(async()=>{if(!roomId)return;try{const keywords=await fetchExtractedKeywords(roomId);setProfiles(keywords||[]);}catch(error){toast.error(\"Failed to load research profiles.\");}},[roomId,fetchExtractedKeywords]);const handleGenerateTeams=useCallback(async()=>{if(!roomId)return;await createTeams(roomId);},[roomId,createTeams]);useEffect(()=>{loadProfiles();},[loadProfiles]);return{profiles,roomId,navigate,isCreatingTeams,handleGenerateTeams};};export default useProfilePage;","map":{"version":3,"names":["useCallback","useEffect","useState","useNavigate","useParams","toast","computingService","roomService","useProfilePage","roomId","navigate","profiles","setProfiles","isCreatingTeams","setIsCreatingTeams","createTeams","roomID","data","createTeamsFromRoom","success","err","console","error","message","fetchExtractedKeywords","getExtractedKeywords","loadProfiles","keywords","handleGenerateTeams"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFProject/src/hooks/useProfilePage.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport computingService from '../services/computingService';\nimport roomService from '../services/roomService';\n\n\nconst useProfilePage = () => {\n  const { roomId } = useParams();\n  const navigate = useNavigate();\n\n  const [profiles, setProfiles] = useState([]);\n\n  const [isCreatingTeams, setIsCreatingTeams] = useState(false);\n\n  const createTeams = async (roomID) => {\n    setIsCreatingTeams(true);\n    try {\n      const data = await roomService.createTeamsFromRoom(roomID);\n      toast.success('Teams created successfully!');\n      navigate(`/room/${roomID}/teams`);\n      return data;\n    } catch (err) {\n      console.error('Create teams error:', err);\n      toast.error(err.message || 'Failed to create teams');\n    } finally {\n      setIsCreatingTeams(false);\n    }\n  };\n\n  const fetchExtractedKeywords = useCallback(async (roomID) => {\n    try {\n      const data = await computingService.getExtractedKeywords(roomID);\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching extracted keywords:', error);\n      toast.error('Failed to fetch extracted keywords.');\n      return [];\n    }\n  }, []);\n\n  const loadProfiles = useCallback(async () => {\n    if (!roomId) return;\n    try {\n      const keywords = await fetchExtractedKeywords(roomId);\n      setProfiles(keywords || []);\n    } catch (error) {\n      toast.error(\"Failed to load research profiles.\");\n    }\n  }, [roomId, fetchExtractedKeywords]);\n\n  const handleGenerateTeams = useCallback(async () => {\n    if (!roomId) return;\n    await createTeams(roomId);\n  }, [roomId, createTeams]);\n\n  useEffect(() => {\n    loadProfiles();\n  }, [loadProfiles]);\n\n  return {\n    profiles,\n    roomId,\n    navigate,\n    isCreatingTeams,\n    handleGenerateTeams,\n  };\n};\n\nexport default useProfilePage;\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CACxD,OAASC,WAAW,CAAEC,SAAS,KAAQ,kBAAkB,CACzD,OAASC,KAAK,KAAQ,gBAAgB,CACtC,MAAO,CAAAC,gBAAgB,KAAM,8BAA8B,CAC3D,MAAO,CAAAC,WAAW,KAAM,yBAAyB,CAGjD,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAEC,MAAO,CAAC,CAAGL,SAAS,CAAC,CAAC,CAC9B,KAAM,CAAAM,QAAQ,CAAGP,WAAW,CAAC,CAAC,CAE9B,KAAM,CAACQ,QAAQ,CAAEC,WAAW,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAE5C,KAAM,CAACW,eAAe,CAAEC,kBAAkB,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CAE7D,KAAM,CAAAa,WAAW,CAAG,KAAO,CAAAC,MAAM,EAAK,CACpCF,kBAAkB,CAAC,IAAI,CAAC,CACxB,GAAI,CACF,KAAM,CAAAG,IAAI,CAAG,KAAM,CAAAV,WAAW,CAACW,mBAAmB,CAACF,MAAM,CAAC,CAC1DX,KAAK,CAACc,OAAO,CAAC,6BAA6B,CAAC,CAC5CT,QAAQ,CAAC,SAASM,MAAM,QAAQ,CAAC,CACjC,MAAO,CAAAC,IAAI,CACb,CAAE,MAAOG,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAEF,GAAG,CAAC,CACzCf,KAAK,CAACiB,KAAK,CAACF,GAAG,CAACG,OAAO,EAAI,wBAAwB,CAAC,CACtD,CAAC,OAAS,CACRT,kBAAkB,CAAC,KAAK,CAAC,CAC3B,CACF,CAAC,CAED,KAAM,CAAAU,sBAAsB,CAAGxB,WAAW,CAAC,KAAO,CAAAgB,MAAM,EAAK,CAC3D,GAAI,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAX,gBAAgB,CAACmB,oBAAoB,CAACT,MAAM,CAAC,CAChE,MAAO,CAAAC,IAAI,EAAI,EAAE,CACnB,CAAE,MAAOK,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAAC,CAC1DjB,KAAK,CAACiB,KAAK,CAAC,qCAAqC,CAAC,CAClD,MAAO,EAAE,CACX,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAI,YAAY,CAAG1B,WAAW,CAAC,SAAY,CAC3C,GAAI,CAACS,MAAM,CAAE,OACb,GAAI,CACF,KAAM,CAAAkB,QAAQ,CAAG,KAAM,CAAAH,sBAAsB,CAACf,MAAM,CAAC,CACrDG,WAAW,CAACe,QAAQ,EAAI,EAAE,CAAC,CAC7B,CAAE,MAAOL,KAAK,CAAE,CACdjB,KAAK,CAACiB,KAAK,CAAC,mCAAmC,CAAC,CAClD,CACF,CAAC,CAAE,CAACb,MAAM,CAAEe,sBAAsB,CAAC,CAAC,CAEpC,KAAM,CAAAI,mBAAmB,CAAG5B,WAAW,CAAC,SAAY,CAClD,GAAI,CAACS,MAAM,CAAE,OACb,KAAM,CAAAM,WAAW,CAACN,MAAM,CAAC,CAC3B,CAAC,CAAE,CAACA,MAAM,CAAEM,WAAW,CAAC,CAAC,CAEzBd,SAAS,CAAC,IAAM,CACdyB,YAAY,CAAC,CAAC,CAChB,CAAC,CAAE,CAACA,YAAY,CAAC,CAAC,CAElB,MAAO,CACLf,QAAQ,CACRF,MAAM,CACNC,QAAQ,CACRG,eAAe,CACfe,mBACF,CAAC,CACH,CAAC,CAED,cAAe,CAAApB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}