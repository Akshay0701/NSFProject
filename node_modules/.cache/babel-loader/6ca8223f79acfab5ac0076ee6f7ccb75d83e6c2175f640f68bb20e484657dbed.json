{"ast":null,"code":"const BASE_URL = 'http://127.0.0.1:5000/room';\nconst getRoomData = async (roomId, email) => {\n  const response = await fetch(`${BASE_URL}/get-room/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomId,\n      email\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch room data');\n  }\n  return await response.json();\n};\nconst addProfileToRoom = async ({\n  roomID,\n  name,\n  email,\n  description\n}) => {\n  const response = await fetch(`${BASE_URL}/add-profile`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID,\n      name,\n      email,\n      description\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to add profile to room');\n  }\n  return response.json();\n};\nconst removeProfileFromRoom = async ({\n  roomID,\n  email,\n  senderEmail\n}) => {\n  const response = await fetch(`${BASE_URL}/remove-profile`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID,\n      email,\n      sender_email: senderEmail\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to remove profile from room');\n  }\n  return response.json();\n};\nconst createRoom = async creatorID => {\n  const response = await fetch(`${BASE_URL}/create-room`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      creator_id: creatorID\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to create room');\n  }\n  return response.json(); // { message: \"...\", RoomID: \"...\" }\n};\nconst getRoomsByEmail = async email => {\n  const response = await fetch(`${BASE_URL}/get-rooms-by-email`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch rooms by email');\n  }\n  return response.json(); // { rooms: [...] }\n};\nconst getJoinedRoomsByEmail = async email => {\n  const response = await fetch(`${BASE_URL}/get-joined-room/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch rooms by email');\n  }\n  return response.json(); // { rooms: [...] }\n};\nconst removeRoomData = async ({\n  roomID,\n  email\n}) => {\n  const response = await fetch(`${BASE_URL}/remove-room`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID,\n      email\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to delete room');\n  }\n  return response.json();\n};\nconst createTeamsFromRoom = async roomID => {\n  const response = await fetch(`${BASE_URL}/create-team`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to create teams');\n  }\n  return response.json(); // { teams: [...] }\n};\nconst getTeamsByRoom = async roomID => {\n  const response = await fetch(`${BASE_URL}/get-teams`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch teams');\n  }\n  return response.json(); // Expected to be an array of teams\n};\nexport default {\n  getRoomData,\n  getTeamsByRoom,\n  addProfileToRoom,\n  removeProfileFromRoom,\n  createRoom,\n  getRoomsByEmail,\n  removeRoomData,\n  createTeamsFromRoom,\n  getJoinedRoomsByEmail\n};","map":{"version":3,"names":["BASE_URL","getRoomData","roomId","email","response","fetch","method","headers","body","JSON","stringify","RoomID","ok","Error","json","addProfileToRoom","roomID","name","description","error","removeProfileFromRoom","senderEmail","sender_email","createRoom","creatorID","creator_id","getRoomsByEmail","getJoinedRoomsByEmail","removeRoomData","createTeamsFromRoom","getTeamsByRoom"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/services/roomService.js"],"sourcesContent":["const BASE_URL = 'http://127.0.0.1:5000/room';\n\nconst getRoomData = async (roomId, email) => {\n  const response = await fetch(`${BASE_URL}/get-room/`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomId, email }),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch room data');\n  }\n  return await response.json();\n};\n\nconst addProfileToRoom = async ({ roomID, name, email, description }) => {\n  const response = await fetch(`${BASE_URL}/add-profile`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID, name, email, description }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to add profile to room');\n  }\n\n  return response.json();\n};\n\nconst removeProfileFromRoom = async ({ roomID, email, senderEmail }) => {\n  const response = await fetch(`${BASE_URL}/remove-profile`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID, email, sender_email: senderEmail }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to remove profile from room');\n  }\n\n  return response.json();\n};\n\nconst createRoom = async (creatorID) => {\n  const response = await fetch(`${BASE_URL}/create-room`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ creator_id: creatorID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to create room');\n  }\n\n  return response.json();  // { message: \"...\", RoomID: \"...\" }\n};\n\nconst getRoomsByEmail = async (email) => {\n  const response = await fetch(`${BASE_URL}/get-rooms-by-email`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch rooms by email');\n  }\n\n  return response.json();  // { rooms: [...] }\n};\n\nconst getJoinedRoomsByEmail = async (email) => {\n  const response = await fetch(`${BASE_URL}/get-joined-room/`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch rooms by email');\n  }\n\n  return response.json();  // { rooms: [...] }\n};\n\nconst removeRoomData = async ({roomID, email}) => {\n  const response = await fetch(`${BASE_URL}/remove-room`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID, email }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to delete room');\n  }\n\n  return response.json();  \n}\n\nconst createTeamsFromRoom = async (roomID) => {\n  const response = await fetch(`${BASE_URL}/create-team`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to create teams');\n  }\n\n  return response.json();  // { teams: [...] }\n};\n\nconst getTeamsByRoom = async (roomID) => {\n  const response = await fetch(`${BASE_URL}/get-teams`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch teams');\n  }\n\n  return response.json(); // Expected to be an array of teams\n};\n\nexport default {\n  getRoomData,\n  getTeamsByRoom,\n  addProfileToRoom,\n  removeProfileFromRoom,\n  createRoom,\n  getRoomsByEmail,\n  removeRoomData,\n  createTeamsFromRoom,\n  getJoinedRoomsByEmail,\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}