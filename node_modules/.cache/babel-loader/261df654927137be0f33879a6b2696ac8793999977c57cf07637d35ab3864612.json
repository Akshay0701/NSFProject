{"ast":null,"code":"const BASE_URL = 'http://127.0.0.1:5000/room';\nconst generateProposalsForRoom = async roomID => {\n  const response = await fetch(`${BASE_URL}/generate-proposals`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to generate proposals');\n  }\n  return response.json(); // { teams: [...] }\n};\nconst getExtractedKeywords = async roomID => {\n  const response = await fetch(`${BASE_URL}/get-extracted-keywords`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to get extracted keywords');\n  }\n  return await response.json();\n};\nconst extractResearchKeywords = async roomID => {\n  const response = await fetch(`${BASE_URL}/extract-keywords`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to extract research keywords');\n  }\n  return response.json(); // { extracted_keywords: [...] }\n};\nconst updateResearchTopicsForUser = async (roomID, email, researchTopics) => {\n  const response = await fetch(`${BASE_URL}/update-research-topics`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID,\n      email: email,\n      research_topics: researchTopics\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to update research topics');\n  }\n  return await response.json(); // { message: \"...\", updated: { ... } }\n};\nconst extractTextFromPDF = async pdfFile => {\n  const formData = new FormData();\n  formData.append('pdf', pdfFile);\n  const response = await fetch(`${BASE_URL}/extract-pdf-text`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to extract text from PDF');\n  }\n  return response.json();\n};\nconst extractTextFromLink = async link => {\n  const response = await fetch(`${BASE_URL}/extract-link-text`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      url: link\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to extract research keywords');\n  }\n  return response.json(); // { url: [...], text : \"\" }\n};\nexport default {\n  extractTextFromPDF,\n  extractResearchKeywords,\n  generateProposalsForRoom,\n  getExtractedKeywords,\n  extractTextFromLink,\n  updateResearchTopicsForUser\n};","map":{"version":3,"names":["BASE_URL","generateProposalsForRoom","roomID","response","fetch","method","headers","body","JSON","stringify","RoomID","ok","error","json","Error","getExtractedKeywords","extractResearchKeywords","updateResearchTopicsForUser","email","researchTopics","research_topics","extractTextFromPDF","pdfFile","formData","FormData","append","extractTextFromLink","link","url"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/services/computingService.js"],"sourcesContent":["const BASE_URL = 'http://127.0.0.1:5000/room';\n\nconst generateProposalsForRoom = async (roomID) => {\n  const response = await fetch(`${BASE_URL}/generate-proposals`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to generate proposals');\n  }\n\n  return response.json();  // { teams: [...] }\n};\n\nconst getExtractedKeywords = async (roomID) => {\n  const response = await fetch(`${BASE_URL}/get-extracted-keywords`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to get extracted keywords');\n  }\n\n  return await response.json();\n};\n\nconst extractResearchKeywords = async (roomID) => {\n  const response = await fetch(`${BASE_URL}/extract-keywords`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to extract research keywords');\n  }\n\n  return response.json();  // { extracted_keywords: [...] }\n};\n\nconst updateResearchTopicsForUser = async (roomID, email, researchTopics) => {\n  const response = await fetch(`${BASE_URL}/update-research-topics`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      RoomID: roomID,\n      email: email,\n      research_topics: researchTopics,\n    }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to update research topics');\n  }\n\n  return await response.json(); // { message: \"...\", updated: { ... } }\n};\n\n\nconst extractTextFromPDF = async (pdfFile) => {\n  const formData = new FormData();\n  formData.append('pdf', pdfFile);\n\n  const response = await fetch(`${BASE_URL}/extract-pdf-text`, {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to extract text from PDF');\n  }\n\n  return response.json(); \n};\n\nconst extractTextFromLink = async (link) => {\n  const response = await fetch(`${BASE_URL}/extract-link-text`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ url: link }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to extract research keywords');\n  }\n\n  return response.json();  // { url: [...], text : \"\" }\n};\n\nexport default {\n  extractTextFromPDF,\n  extractResearchKeywords,\n  generateProposalsForRoom,\n  getExtractedKeywords,\n  extractTextFromLink,\n  updateResearchTopicsForUser\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,4BAA4B;AAE7C,MAAMC,wBAAwB,GAAG,MAAOC,MAAM,IAAK;EACjD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,qBAAqB,EAAE;IAC7DK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEC,MAAM,EAAER;IAAO,CAAC;EACzC,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,8BAA8B,CAAC;EAChE;EAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC,CAAE;AAC3B,CAAC;AAED,MAAME,oBAAoB,GAAG,MAAOb,MAAM,IAAK;EAC7C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,yBAAyB,EAAE;IACjEK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEC,MAAM,EAAER;IAAO,CAAC;EACzC,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,kCAAkC,CAAC;EACpE;EAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,MAAMG,uBAAuB,GAAG,MAAOd,MAAM,IAAK;EAChD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,mBAAmB,EAAE;IAC3DK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEC,MAAM,EAAER;IAAO,CAAC;EACzC,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,qCAAqC,CAAC;EACvE;EAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC,CAAE;AAC3B,CAAC;AAED,MAAMI,2BAA2B,GAAG,MAAAA,CAAOf,MAAM,EAAEgB,KAAK,EAAEC,cAAc,KAAK;EAC3E,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,yBAAyB,EAAE;IACjEK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,MAAM,EAAER,MAAM;MACdgB,KAAK,EAAEA,KAAK;MACZE,eAAe,EAAED;IACnB,CAAC;EACH,CAAC,CAAC;EAEF,IAAI,CAAChB,QAAQ,CAACQ,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,kCAAkC,CAAC;EACpE;EAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC;AAGD,MAAMQ,kBAAkB,GAAG,MAAOC,OAAO,IAAK;EAC5C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,KAAK,EAAEH,OAAO,CAAC;EAE/B,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,mBAAmB,EAAE;IAC3DK,MAAM,EAAE,MAAM;IACdE,IAAI,EAAEgB;EACR,CAAC,CAAC;EAEF,IAAI,CAACpB,QAAQ,CAACQ,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,iCAAiC,CAAC;EACnE;EAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,MAAMa,mBAAmB,GAAG,MAAOC,IAAI,IAAK;EAC1C,MAAMxB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,oBAAoB,EAAE;IAC5DK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEmB,GAAG,EAAED;IAAK,CAAC;EACpC,CAAC,CAAC;EAEF,IAAI,CAACxB,QAAQ,CAACQ,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACA,KAAK,IAAI,qCAAqC,CAAC;EACvE;EAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC,CAAE;AAC3B,CAAC;AAED,eAAe;EACbQ,kBAAkB;EAClBL,uBAAuB;EACvBf,wBAAwB;EACxBc,oBAAoB;EACpBW,mBAAmB;EACnBT;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}