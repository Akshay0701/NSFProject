{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nconst useProfileStore = create(persist(set => ({\n  profiles: [],\n  extractedProfiles: [],\n  teams: [],\n  teamsWithProposals: [],\n  isLoading: false,\n  isCreatingTeams: false,\n  isGeneratingProposals: false,\n  addProfile: () => set(state => ({\n    profiles: [...state.profiles, {\n      name: '',\n      affiliation: '',\n      researchArea: '',\n      text: '',\n      pdfFile: null,\n      pdfFileName: null // Add this field to store the file name\n    }]\n  })),\n  removeProfile: index => set(state => ({\n    profiles: state.profiles.filter((_, i) => i !== index)\n  })),\n  updateProfile: (index, updatedProfile) => set(state => {\n    const newProfiles = [...state.profiles];\n    newProfiles[index] = updatedProfile;\n    return {\n      profiles: newProfiles\n    };\n  }),\n  setProfiles: profiles => set({\n    profiles\n  }),\n  setExtractedProfiles: profiles => set({\n    extractedProfiles: profiles\n  }),\n  setTeams: teams => set({\n    teams\n  }),\n  setTeamsWithProposals: teams => set({\n    teamsWithProposals: teams\n  }),\n  setIsLoading: loading => set({\n    isLoading: loading\n  }),\n  setIsCreatingTeams: creating => set({\n    isCreatingTeams: creating\n  }),\n  setIsGeneratingProposals: generating => set({\n    isGeneratingProposals: generating\n  })\n}), {\n  name: 'profile-storage',\n  partialize: state => ({\n    profiles: state.profiles.map(profile => ({\n      name: profile.name,\n      affiliation: profile.affiliation,\n      researchArea: profile.researchArea,\n      text: profile.text,\n      pdfFileName: profile.pdfFile ? profile.pdfFile.name : profile.pdfFileName // Store the file name\n      // Exclude pdfFile since File objects can't be serialized\n    })),\n    extractedProfiles: state.extractedProfiles,\n    teams: state.teams,\n    teamsWithProposals: state.teamsWithProposals,\n    isLoading: state.isLoading,\n    isCreatingTeams: state.isCreatingTeams,\n    isGeneratingProposals: state.isGeneratingProposals\n  }),\n  storage: {\n    getItem: name => {\n      const value = localStorage.getItem(name);\n      return value ? JSON.parse(value) : null;\n    },\n    setItem: (name, value) => {\n      localStorage.setItem(name, JSON.stringify(value));\n    },\n    removeItem: name => {\n      localStorage.removeItem(name);\n    }\n  },\n  merge: (persistedState, currentState) => {\n    if (!persistedState) return currentState;\n    // Restore profiles, ensuring pdfFile is null since we only store the name\n    const profiles = persistedState.profiles.map(profile => ({\n      ...profile,\n      pdfFile: null // File object cannot be restored; user must re-upload\n    }));\n    return {\n      ...currentState,\n      ...persistedState,\n      profiles\n    };\n  }\n}));\nexport default useProfileStore;","map":{"version":3,"names":["create","persist","useProfileStore","set","profiles","extractedProfiles","teams","teamsWithProposals","isLoading","isCreatingTeams","isGeneratingProposals","addProfile","state","name","affiliation","researchArea","text","pdfFile","pdfFileName","removeProfile","index","filter","_","i","updateProfile","updatedProfile","newProfiles","setProfiles","setExtractedProfiles","setTeams","setTeamsWithProposals","setIsLoading","loading","setIsCreatingTeams","creating","setIsGeneratingProposals","generating","partialize","map","profile","storage","getItem","value","localStorage","JSON","parse","setItem","stringify","removeItem","merge","persistedState","currentState"],"sources":["/Users/akshayjadhav/Documents/GAWork/NSFProject/src/store/profileStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nconst useProfileStore = create(\n  persist(\n    (set) => ({\n      profiles: [],\n      extractedProfiles: [],\n      teams: [],\n      teamsWithProposals: [],\n      isLoading: false,\n      isCreatingTeams: false,\n      isGeneratingProposals: false,\n\n      addProfile: () =>\n        set((state) => ({\n          profiles: [\n            ...state.profiles,\n            {\n              name: '',\n              affiliation: '',\n              researchArea: '',\n              text: '',\n              pdfFile: null,\n              pdfFileName: null, // Add this field to store the file name\n            },\n          ],\n        })),\n\n      removeProfile: (index) =>\n        set((state) => ({\n          profiles: state.profiles.filter((_, i) => i !== index),\n        })),\n\n      updateProfile: (index, updatedProfile) =>\n        set((state) => {\n          const newProfiles = [...state.profiles];\n          newProfiles[index] = updatedProfile;\n          return { profiles: newProfiles };\n        }),\n\n      setProfiles: (profiles) => set({ profiles }),\n\n      setExtractedProfiles: (profiles) => set({ extractedProfiles: profiles }),\n      setTeams: (teams) => set({ teams }),\n      setTeamsWithProposals: (teams) => set({ teamsWithProposals: teams }),\n      setIsLoading: (loading) => set({ isLoading: loading }),\n      setIsCreatingTeams: (creating) => set({ isCreatingTeams: creating }),\n      setIsGeneratingProposals: (generating) =>\n        set({ isGeneratingProposals: generating }),\n    }),\n    {\n      name: 'profile-storage',\n      partialize: (state) => ({\n        profiles: state.profiles.map((profile) => ({\n          name: profile.name,\n          affiliation: profile.affiliation,\n          researchArea: profile.researchArea,\n          text: profile.text,\n          pdfFileName: profile.pdfFile ? profile.pdfFile.name : profile.pdfFileName, // Store the file name\n          // Exclude pdfFile since File objects can't be serialized\n        })),\n        extractedProfiles: state.extractedProfiles,\n        teams: state.teams,\n        teamsWithProposals: state.teamsWithProposals,\n        isLoading: state.isLoading,\n        isCreatingTeams: state.isCreatingTeams,\n        isGeneratingProposals: state.isGeneratingProposals,\n      }),\n      storage: {\n        getItem: (name) => {\n          const value = localStorage.getItem(name);\n          return value ? JSON.parse(value) : null;\n        },\n        setItem: (name, value) => {\n          localStorage.setItem(name, JSON.stringify(value));\n        },\n        removeItem: (name) => {\n          localStorage.removeItem(name);\n        },\n      },\n      merge: (persistedState, currentState) => {\n        if (!persistedState) return currentState;\n        // Restore profiles, ensuring pdfFile is null since we only store the name\n        const profiles = persistedState.profiles.map((profile) => ({\n          ...profile,\n          pdfFile: null, // File object cannot be restored; user must re-upload\n        }));\n        return {\n          ...currentState,\n          ...persistedState,\n          profiles,\n        };\n      },\n    }\n  )\n);\n\nexport default useProfileStore;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}