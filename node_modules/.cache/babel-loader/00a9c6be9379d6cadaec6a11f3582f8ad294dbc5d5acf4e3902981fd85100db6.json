{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport authService from '../services/authService';\nconst useRegisterPage = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const navigate = useNavigate();\n  const registerUser = async (email, password) => {\n    try {\n      const data = await authService.register(email, password);\n      toast.success('Registration successful! Please log in.');\n      localStorage.setItem('authToken', data.tokens.AccessToken);\n      localStorage.setItem('refreshToken', data.tokens.RefreshToken);\n      localStorage.setItem('userEmail', email); // store token if needed\n      navigate('/intro');\n    } catch (error) {\n      console.error('Register error:', error.message);\n      toast.error(error.message);\n    }\n  };\n  const handleRegister = async e => {\n    e.preventDefault();\n    const trimmedEmail = email.trim();\n    const trimmedPassword = password.trim();\n    const trimmedConfirmPassword = confirmPassword.trim();\n\n    // Empty fields check\n    if (!trimmedEmail || !trimmedPassword || !trimmedConfirmPassword) {\n      toast.error('Please fill out all fields.');\n      return;\n    }\n\n    // Email format check\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(trimmedEmail)) {\n      toast.error('Please enter a valid email address.');\n      return;\n    }\n\n    // Password strength check\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]).{8,}$/;\n    if (!passwordRegex.test(trimmedPassword)) {\n      toast.error('Password must be at least 8 characters long and include uppercase, lowercase, number, and special character.');\n      return;\n    }\n\n    // Confirm password match\n    if (trimmedPassword !== trimmedConfirmPassword) {\n      toast.error('Passwords do not match.');\n      return;\n    }\n    try {\n      setLoading(true);\n      await registerUser(trimmedEmail, trimmedPassword);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const toggleShowPassword = () => setShowPassword(prev => !prev);\n  const toggleShowConfirmPassword = () => setShowConfirmPassword(prev => !prev);\n  return {\n    email,\n    password,\n    confirmPassword,\n    setEmail,\n    setPassword,\n    setConfirmPassword,\n    loading,\n    showPassword,\n    showConfirmPassword,\n    toggleShowPassword,\n    toggleShowConfirmPassword,\n    handleRegister,\n    registerUser\n  };\n};\n_s(useRegisterPage, \"OHMdKT8rkPLppdB3ANEidY3GDfk=\", false, function () {\n  return [useNavigate];\n});\nexport default useRegisterPage;","map":{"version":3,"names":["useState","toast","useNavigate","authService","useRegisterPage","_s","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","loading","setLoading","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","navigate","registerUser","data","register","success","localStorage","setItem","tokens","AccessToken","RefreshToken","error","console","message","handleRegister","e","preventDefault","trimmedEmail","trim","trimmedPassword","trimmedConfirmPassword","emailRegex","test","passwordRegex","toggleShowPassword","prev","toggleShowConfirmPassword"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/hooks/useRegisterPage.js"],"sourcesContent":["import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport authService from '../services/authService';\n\nconst useRegisterPage = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const navigate = useNavigate();\n\n  const registerUser = async (email, password) => {\n    try {\n      const data = await authService.register(email, password);\n      toast.success('Registration successful! Please log in.');\n      localStorage.setItem('authToken', data.tokens.AccessToken);\n      localStorage.setItem('refreshToken', data.tokens.RefreshToken);\n      localStorage.setItem('userEmail', email); // store token if needed\n      navigate('/intro');\n    } catch (error) {\n      console.error('Register error:', error.message);\n      toast.error(error.message);\n    }\n  };\n\n  const handleRegister = async (e) => {\n    e.preventDefault();\n  \n    const trimmedEmail = email.trim();\n    const trimmedPassword = password.trim();\n    const trimmedConfirmPassword = confirmPassword.trim();\n  \n    // Empty fields check\n    if (!trimmedEmail || !trimmedPassword || !trimmedConfirmPassword) {\n      toast.error('Please fill out all fields.');\n      return;\n    }\n  \n    // Email format check\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(trimmedEmail)) {\n      toast.error('Please enter a valid email address.');\n      return;\n    }\n  \n    // Password strength check\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]).{8,}$/;\n    if (!passwordRegex.test(trimmedPassword)) {\n      toast.error(\n        'Password must be at least 8 characters long and include uppercase, lowercase, number, and special character.'\n      );\n      return;\n    }\n  \n    // Confirm password match\n    if (trimmedPassword !== trimmedConfirmPassword) {\n      toast.error('Passwords do not match.');\n      return;\n    }\n  \n    try {\n      setLoading(true);\n      await registerUser(trimmedEmail, trimmedPassword);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n\n  const toggleShowPassword = () => setShowPassword((prev) => !prev);\n  const toggleShowConfirmPassword = () => setShowConfirmPassword((prev) => !prev);\n\n  return {\n    email,\n    password,\n    confirmPassword,\n    setEmail,\n    setPassword,\n    setConfirmPassword,\n    loading,\n    showPassword,\n    showConfirmPassword,\n    toggleShowPassword,\n    toggleShowConfirmPassword,\n    handleRegister,\n    registerUser,\n  };\n};\n\nexport default useRegisterPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}