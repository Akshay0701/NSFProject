{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\n// Utility to convert a File to a Data URL\nconst fileToDataUrl = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.onload = () => resolve(reader.result);\n  reader.onerror = reject;\n  reader.readAsDataURL(file);\n});\n\n// Utility to convert a Data URL back to a File\nconst dataUrlToFile = (dataUrl, filename) => {\n  const arr = dataUrl.split(',');\n  const mime = arr[0].match(/:(.*?);/)[1];\n  const bstr = atob(arr[1]);\n  let n = bstr.length;\n  const u8arr = new Uint8Array(n);\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n  return new File([u8arr], filename, {\n    type: mime\n  });\n};\nconst useProfileStore = create(persist(set => ({\n  profiles: [],\n  extractedProfiles: [],\n  teams: [],\n  teamsWithProposals: [],\n  isLoading: false,\n  isCreatingTeams: false,\n  isGeneratingProposals: false,\n  addProfile: () => set(state => ({\n    profiles: [...state.profiles, {\n      name: '',\n      affiliation: '',\n      researchArea: '',\n      text: '',\n      pdfFile: null\n    }]\n  })),\n  removeProfile: index => set(state => ({\n    profiles: state.profiles.filter((_, i) => i !== index)\n  })),\n  updateProfile: (index, updatedProfile) => set(state => {\n    const newProfiles = [...state.profiles];\n    newProfiles[index] = updatedProfile;\n    return {\n      profiles: newProfiles\n    };\n  }),\n  setProfiles: profiles => set({\n    profiles\n  }),\n  setExtractedProfiles: profiles => set({\n    extractedProfiles: profiles\n  }),\n  setTeams: teams => set({\n    teams\n  }),\n  setTeamsWithProposals: teams => set({\n    teamsWithProposals: teams\n  }),\n  setIsLoading: loading => set({\n    isLoading: loading\n  }),\n  setIsCreatingTeams: creating => set({\n    isCreatingTeams: creating\n  }),\n  setIsGeneratingProposals: generating => set({\n    isGeneratingProposals: generating\n  })\n}), {\n  name: 'profile-storage',\n  partialize: state => ({\n    profiles: state.profiles.map(profile => ({\n      name: profile.name,\n      affiliation: profile.affiliation,\n      researchArea: profile.researchArea,\n      text: profile.text,\n      // Store pdfFile as a Data URL and its name\n      pdfFileData: profile.pdfFile ? {\n        name: profile.pdfFile.name,\n        dataUrl: null\n      } : null\n    })),\n    extractedProfiles: state.extractedProfiles,\n    teams: state.teams,\n    teamsWithProposals: state.teamsWithProposals,\n    isLoading: state.isLoading,\n    isCreatingTeams: state.isCreatingTeams,\n    isGeneratingProposals: state.isGeneratingProposals\n  }),\n  storage: {\n    getItem: name => {\n      const value = localStorage.getItem(name);\n      return value ? JSON.parse(value) : null;\n    },\n    setItem: async (name, value) => {\n      // Convert pdfFile to Data URL before saving\n      const profilesWithDataUrls = await Promise.all(value.state.profiles.map(async profile => {\n        if (profile.pdfFileData && profile.pdfFileData.dataUrl === null) {\n          const dataUrl = await fileToDataUrl(profile.pdfFile);\n          return {\n            ...profile,\n            pdfFileData: {\n              ...profile.pdfFileData,\n              dataUrl\n            }\n          };\n        }\n        return profile;\n      }));\n      localStorage.setItem(name, JSON.stringify({\n        ...value,\n        state: {\n          ...value.state,\n          profiles: profilesWithDataUrls\n        }\n      }));\n    },\n    removeItem: name => {\n      localStorage.removeItem(name);\n    }\n  },\n  merge: (persistedState, currentState) => {\n    if (!persistedState) return currentState;\n    // Reconstruct File objects from Data URLs\n    const profiles = persistedState.profiles.map(profile => {\n      if (profile.pdfFileData && profile.pdfFileData.dataUrl) {\n        const file = dataUrlToFile(profile.pdfFileData.dataUrl, profile.pdfFileData.name);\n        return {\n          ...profile,\n          pdfFile: file,\n          pdfFileData: undefined\n        };\n      }\n      return {\n        ...profile,\n        pdfFile: null,\n        pdfFileData: undefined\n      };\n    });\n    return {\n      ...currentState,\n      ...persistedState,\n      profiles\n    };\n  }\n}));\nexport default useProfileStore;","map":{"version":3,"names":["create","persist","fileToDataUrl","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","dataUrlToFile","dataUrl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","useProfileStore","set","profiles","extractedProfiles","teams","teamsWithProposals","isLoading","isCreatingTeams","isGeneratingProposals","addProfile","state","name","affiliation","researchArea","text","pdfFile","removeProfile","index","filter","_","i","updateProfile","updatedProfile","newProfiles","setProfiles","setExtractedProfiles","setTeams","setTeamsWithProposals","setIsLoading","loading","setIsCreatingTeams","creating","setIsGeneratingProposals","generating","partialize","map","profile","pdfFileData","storage","getItem","value","localStorage","JSON","parse","setItem","profilesWithDataUrls","all","stringify","removeItem","merge","persistedState","currentState","undefined"],"sources":["/Users/akshayjadhav/Documents/GAWork/NSFProject/src/store/profileStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\n// Utility to convert a File to a Data URL\nconst fileToDataUrl = (file) =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n  });\n\n// Utility to convert a Data URL back to a File\nconst dataUrlToFile = (dataUrl, filename) => {\n  const arr = dataUrl.split(',');\n  const mime = arr[0].match(/:(.*?);/)[1];\n  const bstr = atob(arr[1]);\n  let n = bstr.length;\n  const u8arr = new Uint8Array(n);\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n  return new File([u8arr], filename, { type: mime });\n};\n\nconst useProfileStore = create(\n  persist(\n    (set) => ({\n      profiles: [],\n      extractedProfiles: [],\n      teams: [],\n      teamsWithProposals: [],\n      isLoading: false,\n      isCreatingTeams: false,\n      isGeneratingProposals: false,\n\n      addProfile: () =>\n        set((state) => ({\n          profiles: [\n            ...state.profiles,\n            {\n              name: '',\n              affiliation: '',\n              researchArea: '',\n              text: '',\n              pdfFile: null,\n            },\n          ],\n        })),\n\n      removeProfile: (index) =>\n        set((state) => ({\n          profiles: state.profiles.filter((_, i) => i !== index),\n        })),\n\n      updateProfile: (index, updatedProfile) =>\n        set((state) => {\n          const newProfiles = [...state.profiles];\n          newProfiles[index] = updatedProfile;\n          return { profiles: newProfiles };\n        }),\n\n      setProfiles: (profiles) => set({ profiles }),\n\n      setExtractedProfiles: (profiles) => set({ extractedProfiles: profiles }),\n      setTeams: (teams) => set({ teams }),\n      setTeamsWithProposals: (teams) => set({ teamsWithProposals: teams }),\n      setIsLoading: (loading) => set({ isLoading: loading }),\n      setIsCreatingTeams: (creating) => set({ isCreatingTeams: creating }),\n      setIsGeneratingProposals: (generating) =>\n        set({ isGeneratingProposals: generating }),\n    }),\n    {\n      name: 'profile-storage',\n      partialize: (state) => ({\n        profiles: state.profiles.map((profile) => ({\n          name: profile.name,\n          affiliation: profile.affiliation,\n          researchArea: profile.researchArea,\n          text: profile.text,\n          // Store pdfFile as a Data URL and its name\n          pdfFileData: profile.pdfFile\n            ? { name: profile.pdfFile.name, dataUrl: null }\n            : null,\n        })),\n        extractedProfiles: state.extractedProfiles,\n        teams: state.teams,\n        teamsWithProposals: state.teamsWithProposals,\n        isLoading: state.isLoading,\n        isCreatingTeams: state.isCreatingTeams,\n        isGeneratingProposals: state.isGeneratingProposals,\n      }),\n      storage: {\n        getItem: (name) => {\n          const value = localStorage.getItem(name);\n          return value ? JSON.parse(value) : null;\n        },\n        setItem: async (name, value) => {\n          // Convert pdfFile to Data URL before saving\n          const profilesWithDataUrls = await Promise.all(\n            value.state.profiles.map(async (profile) => {\n              if (profile.pdfFileData && profile.pdfFileData.dataUrl === null) {\n                const dataUrl = await fileToDataUrl(profile.pdfFile);\n                return {\n                  ...profile,\n                  pdfFileData: { ...profile.pdfFileData, dataUrl },\n                };\n              }\n              return profile;\n            })\n          );\n          localStorage.setItem(\n            name,\n            JSON.stringify({ ...value, state: { ...value.state, profiles: profilesWithDataUrls } })\n          );\n        },\n        removeItem: (name) => {\n          localStorage.removeItem(name);\n        },\n      },\n      merge: (persistedState, currentState) => {\n        if (!persistedState) return currentState;\n        // Reconstruct File objects from Data URLs\n        const profiles = persistedState.profiles.map((profile) => {\n          if (profile.pdfFileData && profile.pdfFileData.dataUrl) {\n            const file = dataUrlToFile(\n              profile.pdfFileData.dataUrl,\n              profile.pdfFileData.name\n            );\n            return { ...profile, pdfFile: file, pdfFileData: undefined };\n          }\n          return { ...profile, pdfFile: null, pdfFileData: undefined };\n        });\n        return {\n          ...currentState,\n          ...persistedState,\n          profiles,\n        };\n      },\n    }\n  )\n);\n\nexport default useProfileStore;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}