{"ast":null,"code":"var _s2 = $RefreshSig$();\nimport { useCallback } from 'react';\nimport roomService from '../services/roomService';\nimport { toast } from 'react-toastify';\nconst useRoom = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const fetchRoomData = useCallback(async roomId => {\n    try {\n      const data = await roomService.getRoomData(roomId);\n      console.log('data at useRoom page:', data);\n      return data;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load room data.');\n      return null;\n    }\n  }, []);\n  const extractTextFromPDF = useCallback(async pdfFile => {\n    try {\n      const data = await roomService.extractTextFromPDF(pdfFile);\n      return data.text; // expects { text: '...' }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to extract text from PDF.');\n      return '';\n    }\n  }, []);\n  const removeProfile = useCallback(async ({\n    roomID,\n    email,\n    senderEmail\n  }) => {\n    try {\n      const result = await roomService.removeProfileFromRoom({\n        roomID,\n        email,\n        senderEmail\n      });\n      toast.success('Profile removed successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to remove profile.');\n      throw err;\n    }\n  }, []);\n  const removeRoom = useCallback(async ({\n    roomID,\n    email\n  }) => {\n    try {\n      const result = await roomService.removeRoomData({\n        roomID,\n        email\n      });\n      toast.success('Room removed successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to remove room.');\n      throw err;\n    }\n  }, []);\n  const addProfile = useCallback(async ({\n    roomID,\n    name,\n    email,\n    description\n  }) => {\n    try {\n      const result = await roomService.addProfileToRoom({\n        roomID,\n        name,\n        email,\n        description\n      });\n      toast.success('Profile added successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to add profile.');\n      throw err;\n    }\n  }, []);\n  const createRoom = useCallback(async creatorID => {\n    try {\n      const result = await roomService.createRoom(creatorID);\n      toast.success('Room created successfully.');\n      return result; // { message, RoomID }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to create room.');\n      throw err;\n    }\n  }, []);\n  const getRoomsByEmail = useCallback(async email => {\n    try {\n      const data = await roomService.getRoomsByEmail(email);\n      return data.rooms || [];\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to fetch rooms by email.');\n      return [];\n    }\n  }, []);\n  const useExtractKeywords = () => {\n    _s();\n    const extractKeywords = useCallback(async roomID => {\n      try {\n        const result = await roomService.extractResearchKeywords(roomID);\n        toast.success('Research keywords extracted successfully.');\n        return result.extracted_keywords;\n      } catch (error) {\n        console.error('Error extracting keywords:', error.message);\n        toast.error('Failed to extract research keywords.');\n        return [];\n      }\n    }, []);\n    return {\n      extractKeywords,\n      loading\n    };\n  };\n  _s(useExtractKeywords, \"tUMCCtHa5x+9gtMBuO5md4+LQqw=\");\n  return {\n    fetchRoomData,\n    extractTextFromPDF,\n    addProfile,\n    removeProfile,\n    createRoom,\n    getRoomsByEmail,\n    removeRoom,\n    useExtractKeywords\n  };\n};\n_s2(useRoom, \"/LYfT2+rWSp9nWqWUcb/EcMhuRw=\");\nexport default useRoom;","map":{"version":3,"names":["useCallback","roomService","toast","useRoom","_s2","_s","$RefreshSig$","fetchRoomData","roomId","data","getRoomData","console","log","err","error","extractTextFromPDF","pdfFile","text","removeProfile","roomID","email","senderEmail","result","removeProfileFromRoom","success","removeRoom","removeRoomData","addProfile","name","description","addProfileToRoom","createRoom","creatorID","getRoomsByEmail","rooms","useExtractKeywords","extractKeywords","extractResearchKeywords","extracted_keywords","message","loading"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/hooks/useRoom.js"],"sourcesContent":["import { useCallback } from 'react';\nimport roomService from '../services/roomService';\nimport { toast } from 'react-toastify';\n\nconst useRoom = () => {\n  const fetchRoomData = useCallback(async (roomId) => {\n    try {\n      const data = await roomService.getRoomData(roomId);\n      console.log('data at useRoom page:', data);\n      return data;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load room data.');\n      return null;\n    }\n  }, []);\n\n  const extractTextFromPDF = useCallback(async (pdfFile) => {\n    try {\n      const data = await roomService.extractTextFromPDF(pdfFile);\n      return data.text; // expects { text: '...' }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to extract text from PDF.');\n      return '';\n    }\n  }, []);\n\n  const removeProfile = useCallback(async ({ roomID, email, senderEmail }) => {\n    try {\n      const result = await roomService.removeProfileFromRoom({ roomID, email, senderEmail });\n      toast.success('Profile removed successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to remove profile.');\n      throw err;\n    }\n  }, []);\n\n  const removeRoom = useCallback(async ({roomID, email}) => {\n    try {\n      const result = await roomService.removeRoomData({ roomID, email});\n      toast.success('Room removed successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to remove room.');\n      throw err;\n    }\n  }, [])\n\n  const addProfile = useCallback(async ({ roomID, name, email, description }) => {\n    try {\n      const result = await roomService.addProfileToRoom({ roomID, name, email, description });\n      toast.success('Profile added successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to add profile.');\n      throw err;\n    }\n  }, []);\n\n  const createRoom = useCallback(async (creatorID) => {\n    try {\n      const result = await roomService.createRoom(creatorID);\n      toast.success('Room created successfully.');\n      return result; // { message, RoomID }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to create room.');\n      throw err;\n    }\n  }, []);\n\n  const getRoomsByEmail = useCallback(async (email) => {\n    try {\n      const data = await roomService.getRoomsByEmail(email);\n      return data.rooms || [];\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to fetch rooms by email.');\n      return [];\n    }\n  }, []);\n\n  const useExtractKeywords = () => {\n    const extractKeywords = useCallback(async (roomID) => {\n      try {\n        const result = await roomService.extractResearchKeywords(roomID);\n        toast.success('Research keywords extracted successfully.');\n        return result.extracted_keywords;\n      } catch (error) {\n        console.error('Error extracting keywords:', error.message);\n        toast.error('Failed to extract research keywords.');\n        return [];\n      } \n    }, []);\n  \n    return {\n      extractKeywords,\n      loading,\n    };\n  };\n\n  return {\n    fetchRoomData,\n    extractTextFromPDF,\n    addProfile,\n    removeProfile,\n    createRoom,\n    getRoomsByEmail,\n    removeRoom,\n    useExtractKeywords,\n  };\n};\n\nexport default useRoom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}