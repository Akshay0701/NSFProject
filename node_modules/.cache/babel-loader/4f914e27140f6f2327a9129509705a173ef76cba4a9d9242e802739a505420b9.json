{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport computingService from '../services/computingService';\nimport roomService from '../services/roomService';\nconst useProfilePage = () => {\n  _s();\n  const {\n    roomId\n  } = useParams();\n  const navigate = useNavigate();\n  const [room, setRoom] = useState(null);\n  const [isCreatingTeams, setIsCreatingTeams] = useState(false);\n  const createTeams = async roomID => {\n    setIsCreatingTeams(true);\n    try {\n      const data = await roomService.createTeamsFromRoom(roomID);\n      toast.success('Teams created successfully!');\n      navigate(`/room/${roomID}/teams`);\n      return data;\n    } catch (err) {\n      console.error('Create teams error:', err);\n      toast.error(err.message || 'Failed to create teams');\n    } finally {\n      setIsCreatingTeams(false);\n    }\n  };\n  const updateResearchTopicsForUser = useCallback(async (email, updatedKeywordsList) => {\n    try {\n      const response = await computingService.updateResearchTopicsForUser(roomId, email, updatedKeywordsList);\n      loadProfiles();\n      return response;\n    } catch (err) {\n      toast.error(err.message || 'Update failed');\n      return null;\n    }\n  }, []);\n  const fetchRoomData = useCallback(async roomId => {\n    try {\n      const data = await roomService.getRoomData(roomId);\n      console.log('data at useRoom page:', data);\n      return data;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load room data.');\n      return null;\n    }\n  }, []);\n  const loadProfiles = useCallback(async () => {\n    if (!roomId) return;\n    try {\n      const room = await fetchRoomData(roomId);\n      setRoom(room || {});\n    } catch (error) {\n      toast.error(\"Failed to load research profiles.\");\n    }\n  }, [roomId, fetchRoomData]);\n  const handleGenerateTeams = useCallback(async () => {\n    if (!roomId) return;\n    await createTeams(roomId);\n  }, [roomId, createTeams]);\n  useEffect(() => {\n    loadProfiles();\n  }, [loadProfiles]);\n  return {\n    room,\n    roomId,\n    navigate,\n    isCreatingTeams,\n    handleGenerateTeams,\n    updateResearchTopicsForUser\n  };\n};\n_s(useProfilePage, \"8/b7ozUS8nRGoIwZZJ2/cMUioFU=\", false, function () {\n  return [useParams, useNavigate];\n});\nexport default useProfilePage;","map":{"version":3,"names":["useCallback","useEffect","useState","useNavigate","useParams","toast","computingService","roomService","useProfilePage","_s","roomId","navigate","room","setRoom","isCreatingTeams","setIsCreatingTeams","createTeams","roomID","data","createTeamsFromRoom","success","err","console","error","message","updateResearchTopicsForUser","email","updatedKeywordsList","response","loadProfiles","fetchRoomData","getRoomData","log","handleGenerateTeams"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/hooks/useProfilePage.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport computingService from '../services/computingService';\nimport roomService from '../services/roomService';\n\n\nconst useProfilePage = () => {\n  const { roomId } = useParams();\n  const navigate = useNavigate();\n\n  const [room, setRoom] = useState(null);\n\n  const [isCreatingTeams, setIsCreatingTeams] = useState(false);\n\n  const createTeams = async (roomID) => {\n    setIsCreatingTeams(true);\n    try {\n      const data = await roomService.createTeamsFromRoom(roomID);\n      toast.success('Teams created successfully!');\n      navigate(`/room/${roomID}/teams`);\n      return data;\n    } catch (err) {\n      console.error('Create teams error:', err);\n      toast.error(err.message || 'Failed to create teams');\n    } finally {\n      setIsCreatingTeams(false);\n    }\n  };\n\n  const updateResearchTopicsForUser = useCallback(async (email, updatedKeywordsList) => {\n    try {\n      const response = await computingService.updateResearchTopicsForUser(roomId, email, updatedKeywordsList);\n      loadProfiles();\n      return response;\n    } catch (err) {\n      toast.error(err.message || 'Update failed');\n      return null;\n    }\n  }, []); \n\n  const fetchRoomData = useCallback(async (roomId) => {\n    try {\n      const data = await roomService.getRoomData(roomId);\n      console.log('data at useRoom page:', data);\n      return data;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load room data.');\n      return null;\n    }\n  }, []);\n\n  const loadProfiles = useCallback(async () => {\n    if (!roomId) return;\n    try {\n      const room = await fetchRoomData(roomId);\n      setRoom(room || {});\n    } catch (error) {\n      toast.error(\"Failed to load research profiles.\");\n    }\n  }, [roomId, fetchRoomData]);\n\n  const handleGenerateTeams = useCallback(async () => {\n    if (!roomId) return;\n    await createTeams(roomId);\n  }, [roomId, createTeams]);\n\n  useEffect(() => {\n    loadProfiles();\n  }, [loadProfiles]);\n\n  return {\n    room,\n    roomId,\n    navigate,\n    isCreatingTeams,\n    handleGenerateTeams,\n    updateResearchTopicsForUser\n  };\n};\n\nexport default useProfilePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}