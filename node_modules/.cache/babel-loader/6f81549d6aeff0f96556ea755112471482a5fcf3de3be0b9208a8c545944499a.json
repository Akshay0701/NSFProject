{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useIntroPage.js\nimport { useCallback, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport roomService from '../services/roomService';\nconst useIntroPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [roomID, setRoomID] = useState('');\n  const [roomIDCreate, setRoomIDCreate] = useState('');\n  const [error, setError] = useState('');\n  const [userRooms, setUserRooms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [suggestedRoomIDs, setSuggestedRoomIDs] = useState([]);\n  const userEmail = localStorage.getItem('userEmail');\n  const createRoom = useCallback(async (creatorID, roomID = null) => {\n    try {\n      const result = await roomService.createRoom(creatorID, roomID);\n      toast.success('Room created successfully.');\n      setSuggestedRoomIDs([]); // Clear suggestions if successful\n      return result;\n    } catch (err) {\n      console.error(err);\n      if (roomID) {\n        const suggestions = Array.from({\n          length: 3\n        }, (_, i) => {\n          const suffix = Math.floor(Math.random() * 1000);\n          return `${roomID}-${suffix}`;\n        });\n        setSuggestedRoomIDs(suggestions);\n      } else {\n        toast.error(`${err.message}`);\n      }\n      throw err;\n    }\n  }, []);\n  const getRoomsByEmail = useCallback(async email => {\n    try {\n      const data = await roomService.getRoomsByEmail(email);\n      return data.rooms || [];\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to fetch rooms by email.');\n      return [];\n    }\n  }, []);\n  const removeRoom = useCallback(async ({\n    roomID,\n    email\n  }) => {\n    try {\n      const result = await roomService.removeRoomData({\n        roomID,\n        email\n      });\n      toast.success('Room removed successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to remove room.');\n      throw err;\n    }\n  }, []);\n  const fetchRooms = useCallback(async () => {\n    if (!userEmail) {\n      toast.error('Please log in to view your rooms');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const rooms = await getRoomsByEmail(userEmail);\n      setUserRooms(rooms);\n    } catch {\n      toast.error('Could not fetch rooms');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [userEmail, getRoomsByEmail]);\n  const handleJoinRoom = () => {\n    const trimmedID = roomID.trim();\n    if (!trimmedID) {\n      setError('Please enter a Room ID');\n      return;\n    }\n    setError('');\n    navigate(`/room/${trimmedID}`);\n  };\n  const handleCreateRoom = async () => {\n    if (!userEmail) {\n      toast.error('Please log in to create a room');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const trimmedID = roomIDCreate.trim();\n      let res = null;\n      if (!trimmedID) {\n        res = await createRoom(userEmail);\n      } else {\n        res = await createRoom(userEmail, trimmedID);\n      }\n      const newRoomId = res.RoomID;\n      navigate(`/room/${newRoomId}`);\n    } catch {} finally {\n      setIsLoading(false);\n    }\n  };\n  const handleDeleteRoom = async roomID => {\n    if (!window.confirm('Are you sure you want to delete this room?')) return;\n    try {\n      await removeRoom({\n        roomID,\n        email: userEmail\n      });\n      fetchRooms();\n    } catch {\n      toast.error('Failed to delete room');\n    }\n  };\n  useEffect(() => {\n    fetchRooms();\n  }, [fetchRooms]);\n  return {\n    roomID,\n    roomIDCreate,\n    suggestedRoomIDs,\n    setRoomID,\n    setRoomIDCreate,\n    setSuggestedRoomIDs,\n    error,\n    setError,\n    isLoading,\n    userRooms,\n    handleJoinRoom,\n    handleCreateRoom,\n    handleDeleteRoom\n  };\n};\n_s(useIntroPage, \"OtbAs6SGynEYS8P4Jw/DgC7F5WE=\", false, function () {\n  return [useNavigate];\n});\nexport default useIntroPage;","map":{"version":3,"names":["useCallback","useEffect","useState","useNavigate","toast","roomService","useIntroPage","_s","navigate","roomID","setRoomID","roomIDCreate","setRoomIDCreate","error","setError","userRooms","setUserRooms","isLoading","setIsLoading","suggestedRoomIDs","setSuggestedRoomIDs","userEmail","localStorage","getItem","createRoom","creatorID","result","success","err","console","suggestions","Array","from","length","_","i","suffix","Math","floor","random","message","getRoomsByEmail","email","data","rooms","removeRoom","removeRoomData","fetchRooms","handleJoinRoom","trimmedID","trim","handleCreateRoom","res","newRoomId","RoomID","handleDeleteRoom","window","confirm"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/hooks/useIntroPage.js"],"sourcesContent":["// src/hooks/useIntroPage.js\nimport { useCallback, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport roomService from '../services/roomService';\n\nconst useIntroPage = () => {\n  const navigate = useNavigate();\n  const [roomID, setRoomID] = useState('');\n  const [roomIDCreate, setRoomIDCreate] = useState('');\n  const [error, setError] = useState('');\n  const [userRooms, setUserRooms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [suggestedRoomIDs, setSuggestedRoomIDs] = useState([]);\n\n  const userEmail = localStorage.getItem('userEmail');\n\n  const createRoom = useCallback(async (creatorID, roomID = null) => {\n    try {\n      const result = await roomService.createRoom(creatorID, roomID);\n      toast.success('Room created successfully.');\n      setSuggestedRoomIDs([]);  // Clear suggestions if successful\n      return result;\n    } catch (err) {\n      console.error(err);\n  \n      if (roomID) {\n        const suggestions = Array.from({ length: 3 }, (_, i) => {\n          const suffix = Math.floor(Math.random() * 1000);\n          return `${roomID}-${suffix}`;\n        });\n        setSuggestedRoomIDs(suggestions);\n      } else {\n        toast.error(`${err.message}`);\n      }\n  \n      throw err;\n    }\n  }, []);\n\n  const getRoomsByEmail = useCallback(async (email) => {\n    try {\n      const data = await roomService.getRoomsByEmail(email);\n      return data.rooms || [];\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to fetch rooms by email.');\n      return [];\n    }\n  }, []);\n\n  const removeRoom = useCallback(async ({roomID, email}) => {\n    try {\n      const result = await roomService.removeRoomData({ roomID, email});\n      toast.success('Room removed successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to remove room.');\n      throw err;\n    }\n  }, [])\n\n  const fetchRooms = useCallback(async () => {\n    if (!userEmail) {\n      toast.error('Please log in to view your rooms');\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const rooms = await getRoomsByEmail(userEmail);\n      setUserRooms(rooms);\n    } catch {\n      toast.error('Could not fetch rooms');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [userEmail, getRoomsByEmail]);\n\n  const handleJoinRoom = () => {\n    const trimmedID = roomID.trim();\n    if (!trimmedID) {\n      setError('Please enter a Room ID');\n      return;\n    }\n    setError('');\n    navigate(`/room/${trimmedID}`);\n  };\n\n  const handleCreateRoom = async () => {\n    if (!userEmail) {\n      toast.error('Please log in to create a room');\n      return;\n    }\n  \n    setIsLoading(true);\n    try {\n      const trimmedID = roomIDCreate.trim();\n      let res = null; \n  \n      if (!trimmedID) {\n        res = await createRoom(userEmail);\n      } else {\n        res = await createRoom(userEmail, trimmedID);\n      }\n  \n      const newRoomId = res.RoomID;\n      navigate(`/room/${newRoomId}`);\n    } catch {\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDeleteRoom = async (roomID) => {\n    if (!window.confirm('Are you sure you want to delete this room?')) return;\n    try {\n      await removeRoom({ roomID, email: userEmail });\n      fetchRooms();\n    } catch {\n      toast.error('Failed to delete room');\n    }\n  };\n\n  useEffect(() => {\n    fetchRooms();\n  }, [fetchRooms]);\n\n  return {\n    roomID,\n    roomIDCreate,\n    suggestedRoomIDs,\n    setRoomID,\n    setRoomIDCreate,\n    setSuggestedRoomIDs,\n    error,\n    setError,\n    isLoading,\n    userRooms,\n    handleJoinRoom,\n    handleCreateRoom,\n    handleDeleteRoom,\n  };\n};\n\nexport default useIntroPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}