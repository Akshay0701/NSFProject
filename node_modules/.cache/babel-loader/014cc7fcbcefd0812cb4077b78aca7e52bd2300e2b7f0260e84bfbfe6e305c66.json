{"ast":null,"code":"const BASE_URL = '/api/nsf';\n\n// Extract research interests from profiles\nconst extractInterests = async profiles => {\n  const formData = new FormData();\n  const apiData = profiles.map(profile => ({\n    name: profile.name,\n    description: profile.text\n  }));\n  formData.append('profiles', JSON.stringify(apiData));\n  profiles.forEach((profile, index) => {\n    if (profile.pdfFile) {\n      formData.append(`pdf${index}`, profile.pdfFile);\n    }\n  });\n  const response = await fetch(`${BASE_URL}/extract_interests`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch research interests');\n  }\n  return response.json();\n};\n\n// Create research teams from extracted profiles\nconst createTeams = async extractedProfiles => {\n  const response = await fetch(`${BASE_URL}/teamcreation`, {\n    method: 'POST',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(extractedProfiles)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create teams');\n  }\n  return response.json();\n};\n\n// Generate project proposals for teams\nconst generateProposals = async teams => {\n  const response = await fetch(`${BASE_URL}/generate-proposals`, {\n    method: 'POST',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(teams)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to generate proposals');\n  }\n  return response.json();\n};\n\n// Assign the object to a variable before exporting\nconst nsfService = {\n  extractInterests,\n  createTeams,\n  generateProposals\n};\nexport default nsfService;","map":{"version":3,"names":["BASE_URL","extractInterests","profiles","formData","FormData","apiData","map","profile","name","description","text","append","JSON","stringify","forEach","index","pdfFile","response","fetch","method","body","ok","Error","json","createTeams","extractedProfiles","mode","headers","generateProposals","teams","nsfService"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFProject/src/services/nsfService.js"],"sourcesContent":["const BASE_URL = '/api/nsf';\n\n// Extract research interests from profiles\nconst extractInterests = async (profiles) => {\n  const formData = new FormData();\n  const apiData = profiles.map((profile) => ({\n    name: profile.name,\n    description: profile.text,\n  }));\n\n  formData.append('profiles', JSON.stringify(apiData));\n  profiles.forEach((profile, index) => {\n    if (profile.pdfFile) {\n      formData.append(`pdf${index}`, profile.pdfFile);\n    }\n  });\n\n  const response = await fetch(`${BASE_URL}/extract_interests`, {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to fetch research interests');\n  }\n\n  return response.json();\n};\n\n// Create research teams from extracted profiles\nconst createTeams = async (extractedProfiles) => {\n  const response = await fetch(`${BASE_URL}/teamcreation`, {\n    method: 'POST',\n    mode: 'cors',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(extractedProfiles),\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to create teams');\n  }\n\n  return response.json();\n};\n\n// Generate project proposals for teams\nconst generateProposals = async (teams) => {\n  const response = await fetch(`${BASE_URL}/generate-proposals`, {\n    method: 'POST',\n    mode: 'cors',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(teams),\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to generate proposals');\n  }\n\n  return response.json();\n};\n\n// Assign the object to a variable before exporting\nconst nsfService = {\n  extractInterests,\n  createTeams,\n  generateProposals,\n};\n\nexport default nsfService;"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,UAAU;;AAE3B;AACA,MAAMC,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;EAC3C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/B,MAAMC,OAAO,GAAGH,QAAQ,CAACI,GAAG,CAAEC,OAAO,KAAM;IACzCC,IAAI,EAAED,OAAO,CAACC,IAAI;IAClBC,WAAW,EAAEF,OAAO,CAACG;EACvB,CAAC,CAAC,CAAC;EAEHP,QAAQ,CAACQ,MAAM,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACR,OAAO,CAAC,CAAC;EACpDH,QAAQ,CAACY,OAAO,CAAC,CAACP,OAAO,EAAEQ,KAAK,KAAK;IACnC,IAAIR,OAAO,CAACS,OAAO,EAAE;MACnBb,QAAQ,CAACQ,MAAM,CAAC,MAAMI,KAAK,EAAE,EAAER,OAAO,CAACS,OAAO,CAAC;IACjD;EACF,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGlB,QAAQ,oBAAoB,EAAE;IAC5DmB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEjB;EACR,CAAC,CAAC;EAEF,IAAI,CAACc,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;EACvD;EAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,MAAMC,WAAW,GAAG,MAAOC,iBAAiB,IAAK;EAC/C,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGlB,QAAQ,eAAe,EAAE;IACvDmB,MAAM,EAAE,MAAM;IACdO,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CP,IAAI,EAAER,IAAI,CAACC,SAAS,CAACY,iBAAiB;EACxC,CAAC,CAAC;EAEF,IAAI,CAACR,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,MAAMK,iBAAiB,GAAG,MAAOC,KAAK,IAAK;EACzC,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGlB,QAAQ,qBAAqB,EAAE;IAC7DmB,MAAM,EAAE,MAAM;IACdO,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CP,IAAI,EAAER,IAAI,CAACC,SAAS,CAACgB,KAAK;EAC5B,CAAC,CAAC;EAEF,IAAI,CAACZ,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACjD;EAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,MAAMO,UAAU,GAAG;EACjB7B,gBAAgB;EAChBuB,WAAW;EACXI;AACF,CAAC;AAED,eAAeE,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}