{"ast":null,"code":"const BASE_URL='/api/nsf';// Extract research interests from profiles\nconst extractInterests=async profiles=>{const formData=new FormData();const apiData=profiles.map(profile=>({name:profile.name,description:profile.text}));formData.append('profiles',JSON.stringify(apiData));profiles.forEach((profile,index)=>{if(profile.pdfFile){formData.append(`pdf${index}`,profile.pdfFile);}});const response=await fetch(`${BASE_URL}/extract_interests`,{method:'POST',body:formData});if(!response.ok){throw new Error('Failed to fetch research interests');}return response.json();};// Create research teams from extracted profiles\nconst createTeams=async extractedProfiles=>{const response=await fetch(`${BASE_URL}/teamcreation`,{method:'POST',mode:'cors',headers:{'Content-Type':'application/json'},body:JSON.stringify(extractedProfiles)});if(!response.ok){throw new Error('Failed to create teams');}return response.json();};// Generate project proposals for teams\nconst generateProposals=async teams=>{const response=await fetch(`${BASE_URL}/generate-proposals`,{method:'POST',mode:'cors',headers:{'Content-Type':'application/json'},body:JSON.stringify(teams)});if(!response.ok){throw new Error('Failed to generate proposals');}return response.json();};export default{extractInterests,createTeams,generateProposals};","map":{"version":3,"names":["BASE_URL","extractInterests","profiles","formData","FormData","apiData","map","profile","name","description","text","append","JSON","stringify","forEach","index","pdfFile","response","fetch","method","body","ok","Error","json","createTeams","extractedProfiles","mode","headers","generateProposals","teams"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFProject/src/services/nsfService.js"],"sourcesContent":["const BASE_URL = '/api/nsf';\n\n// Extract research interests from profiles\nconst extractInterests = async (profiles) => {\n  const formData = new FormData();\n  const apiData = profiles.map((profile) => ({\n    name: profile.name,\n    description: profile.text,\n  }));\n\n  formData.append('profiles', JSON.stringify(apiData));\n  profiles.forEach((profile, index) => {\n    if (profile.pdfFile) {\n      formData.append(`pdf${index}`, profile.pdfFile);\n    }\n  });\n\n  const response = await fetch(`${BASE_URL}/extract_interests`, {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to fetch research interests');\n  }\n\n  return response.json();\n};\n\n// Create research teams from extracted profiles\nconst createTeams = async (extractedProfiles) => {\n  const response = await fetch(`${BASE_URL}/teamcreation`, {\n    method: 'POST',\n    mode: 'cors',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(extractedProfiles),\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to create teams');\n  }\n\n  return response.json();\n};\n\n// Generate project proposals for teams\nconst generateProposals = async (teams) => {\n  const response = await fetch(`${BASE_URL}/generate-proposals`, {\n    method: 'POST',\n    mode: 'cors',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(teams),\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to generate proposals');\n  }\n\n  return response.json();\n};\n\nexport default {\n  extractInterests,\n  createTeams,\n  generateProposals,\n};"],"mappings":"AAAA,KAAM,CAAAA,QAAQ,CAAG,UAAU,CAE3B;AACA,KAAM,CAAAC,gBAAgB,CAAG,KAAO,CAAAC,QAAQ,EAAK,CAC3C,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/B,KAAM,CAAAC,OAAO,CAAGH,QAAQ,CAACI,GAAG,CAAEC,OAAO,GAAM,CACzCC,IAAI,CAAED,OAAO,CAACC,IAAI,CAClBC,WAAW,CAAEF,OAAO,CAACG,IACvB,CAAC,CAAC,CAAC,CAEHP,QAAQ,CAACQ,MAAM,CAAC,UAAU,CAAEC,IAAI,CAACC,SAAS,CAACR,OAAO,CAAC,CAAC,CACpDH,QAAQ,CAACY,OAAO,CAAC,CAACP,OAAO,CAAEQ,KAAK,GAAK,CACnC,GAAIR,OAAO,CAACS,OAAO,CAAE,CACnBb,QAAQ,CAACQ,MAAM,CAAC,MAAMI,KAAK,EAAE,CAAER,OAAO,CAACS,OAAO,CAAC,CACjD,CACF,CAAC,CAAC,CAEF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGlB,QAAQ,oBAAoB,CAAE,CAC5DmB,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEjB,QACR,CAAC,CAAC,CAEF,GAAI,CAACc,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,oCAAoC,CAAC,CACvD,CAEA,MAAO,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CACxB,CAAC,CAED;AACA,KAAM,CAAAC,WAAW,CAAG,KAAO,CAAAC,iBAAiB,EAAK,CAC/C,KAAM,CAAAR,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGlB,QAAQ,eAAe,CAAE,CACvDmB,MAAM,CAAE,MAAM,CACdO,IAAI,CAAE,MAAM,CACZC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CP,IAAI,CAAER,IAAI,CAACC,SAAS,CAACY,iBAAiB,CACxC,CAAC,CAAC,CAEF,GAAI,CAACR,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,wBAAwB,CAAC,CAC3C,CAEA,MAAO,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CACxB,CAAC,CAED;AACA,KAAM,CAAAK,iBAAiB,CAAG,KAAO,CAAAC,KAAK,EAAK,CACzC,KAAM,CAAAZ,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGlB,QAAQ,qBAAqB,CAAE,CAC7DmB,MAAM,CAAE,MAAM,CACdO,IAAI,CAAE,MAAM,CACZC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CP,IAAI,CAAER,IAAI,CAACC,SAAS,CAACgB,KAAK,CAC5B,CAAC,CAAC,CAEF,GAAI,CAACZ,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,8BAA8B,CAAC,CACjD,CAEA,MAAO,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CACxB,CAAC,CAED,cAAe,CACbtB,gBAAgB,CAChBuB,WAAW,CACXI,iBACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}