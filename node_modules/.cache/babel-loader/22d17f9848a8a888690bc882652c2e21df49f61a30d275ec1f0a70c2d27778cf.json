{"ast":null,"code":"import { jwtDecode } from 'jwt-decode';\nimport authService from '../services/authService';\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('authToken');\n  const refreshToken = localStorage.getItem('refreshToken');\n  const email = localStorage.getItem('userEmail');\n  if (!token) return false;\n  try {\n    const decoded = jwtDecode(token);\n    const isTokenValid = Date.now() < decoded.exp * 1000;\n    if (isTokenValid) {\n      return true;\n    }\n\n    // Attempt token refresh\n    if (refreshToken && email) {\n      return refreshSession(email, refreshToken);\n    }\n    return false;\n  } catch {\n    return false;\n  }\n};\nconst refreshSession = async (email, refreshToken) => {\n  try {\n    const data = await authService.refreshToken(email, refreshToken);\n    localStorage.setItem('authToken', data.tokens.AccessToken);\n    localStorage.setItem('idToken', data.tokens.IdToken || '');\n    return true;\n  } catch (err) {\n    logout();\n    return false;\n  }\n};\nexport const logout = () => {\n  localStorage.removeItem('authToken');\n  localStorage.removeItem('refreshToken');\n  localStorage.removeItem('userEmail');\n};","map":{"version":3,"names":["jwtDecode","authService","isAuthenticated","token","localStorage","getItem","refreshToken","email","decoded","isTokenValid","Date","now","exp","refreshSession","data","setItem","tokens","AccessToken","IdToken","err","logout","removeItem"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/utils/auth.js"],"sourcesContent":["import { jwtDecode } from 'jwt-decode';\nimport authService from '../services/authService';\n\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('authToken');\n  const refreshToken = localStorage.getItem('refreshToken');\n  const email = localStorage.getItem('userEmail');\n\n  if (!token) return false;\n\n  try {\n    const decoded = jwtDecode(token);\n    const isTokenValid = Date.now() < decoded.exp * 1000;\n\n    if (isTokenValid) {\n      return true;\n    }\n\n    // Attempt token refresh\n    if (refreshToken && email) {\n      return refreshSession(email, refreshToken);\n    }\n\n    return false;\n  } catch {\n    return false;\n  }\n};\n\nconst refreshSession = async (email, refreshToken) => {\n  try {\n    const data = await authService.refreshToken(email, refreshToken);\n    localStorage.setItem('authToken', data.tokens.AccessToken);\n    localStorage.setItem('idToken', data.tokens.IdToken || '');\n    return true;\n  } catch (err) {\n    logout();\n    return false;\n  }\n};\n\nexport const logout = () => {\n  localStorage.removeItem('authToken');\n  localStorage.removeItem('refreshToken');\n  localStorage.removeItem('userEmail');\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,OAAOC,WAAW,MAAM,yBAAyB;AAEjD,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,MAAMC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EACzD,MAAME,KAAK,GAAGH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAE/C,IAAI,CAACF,KAAK,EAAE,OAAO,KAAK;EAExB,IAAI;IACF,MAAMK,OAAO,GAAGR,SAAS,CAACG,KAAK,CAAC;IAChC,MAAMM,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,OAAO,CAACI,GAAG,GAAG,IAAI;IAEpD,IAAIH,YAAY,EAAE;MAChB,OAAO,IAAI;IACb;;IAEA;IACA,IAAIH,YAAY,IAAIC,KAAK,EAAE;MACzB,OAAOM,cAAc,CAACN,KAAK,EAAED,YAAY,CAAC;IAC5C;IAEA,OAAO,KAAK;EACd,CAAC,CAAC,MAAM;IACN,OAAO,KAAK;EACd;AACF,CAAC;AAED,MAAMO,cAAc,GAAG,MAAAA,CAAON,KAAK,EAAED,YAAY,KAAK;EACpD,IAAI;IACF,MAAMQ,IAAI,GAAG,MAAMb,WAAW,CAACK,YAAY,CAACC,KAAK,EAAED,YAAY,CAAC;IAChEF,YAAY,CAACW,OAAO,CAAC,WAAW,EAAED,IAAI,CAACE,MAAM,CAACC,WAAW,CAAC;IAC1Db,YAAY,CAACW,OAAO,CAAC,SAAS,EAAED,IAAI,CAACE,MAAM,CAACE,OAAO,IAAI,EAAE,CAAC;IAC1D,OAAO,IAAI;EACb,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,MAAM,CAAC,CAAC;IACR,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAMA,MAAM,GAAGA,CAAA,KAAM;EAC1BhB,YAAY,CAACiB,UAAU,CAAC,WAAW,CAAC;EACpCjB,YAAY,CAACiB,UAAU,CAAC,cAAc,CAAC;EACvCjB,YAAY,CAACiB,UAAU,CAAC,WAAW,CAAC;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}