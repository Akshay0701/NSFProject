{"ast":null,"code":"import{useState}from'react';import{toast}from'react-toastify';import{useNavigate}from'react-router-dom';import authService from'../services/authService';const useRegisterPage=()=>{const[email,setEmail]=useState('');const[password,setPassword]=useState('');const[confirmPassword,setConfirmPassword]=useState('');const[loading,setLoading]=useState(false);const[showPassword,setShowPassword]=useState(false);const[showConfirmPassword,setShowConfirmPassword]=useState(false);const navigate=useNavigate();const registerUser=async(email,password)=>{try{const data=await authService.register(email,password);toast.success('Registration successful! Please log in.');localStorage.setItem('authToken',data.tokens.AccessToken);localStorage.setItem('userEmail',email);// store token if needed\nnavigate('/intro');}catch(error){console.error('Register error:',error.message);toast.error(error.message);}};const handleRegister=async e=>{e.preventDefault();if(!email||!password||!confirmPassword){toast.error('Please fill out all fields.');return;}if(password!==confirmPassword){toast.error('Passwords do not match.');return;}setLoading(true);await registerUser(email,password);setLoading(false);};const toggleShowPassword=()=>setShowPassword(prev=>!prev);const toggleShowConfirmPassword=()=>setShowConfirmPassword(prev=>!prev);return{email,password,confirmPassword,setEmail,setPassword,setConfirmPassword,loading,showPassword,showConfirmPassword,toggleShowPassword,toggleShowConfirmPassword,handleRegister,registerUser};};export default useRegisterPage;","map":{"version":3,"names":["useState","toast","useNavigate","authService","useRegisterPage","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","loading","setLoading","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","navigate","registerUser","data","register","success","localStorage","setItem","tokens","AccessToken","error","console","message","handleRegister","e","preventDefault","toggleShowPassword","prev","toggleShowConfirmPassword"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFProject/src/hooks/useRegisterPage.js"],"sourcesContent":["import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport authService from '../services/authService';\n\nconst useRegisterPage = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const navigate = useNavigate();\n\n  const registerUser = async (email, password) => {\n    try {\n      const data = await authService.register(email, password);\n      toast.success('Registration successful! Please log in.');\n      localStorage.setItem('authToken', data.tokens.AccessToken);\n      localStorage.setItem('userEmail', email); // store token if needed\n      navigate('/intro');\n    } catch (error) {\n      console.error('Register error:', error.message);\n      toast.error(error.message);\n    }\n  };\n\n  const handleRegister = async (e) => {\n    e.preventDefault();\n\n    if (!email || !password || !confirmPassword) {\n      toast.error('Please fill out all fields.');\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      toast.error('Passwords do not match.');\n      return;\n    }\n\n    setLoading(true);\n    await registerUser(email, password);\n    setLoading(false);\n  };\n\n  const toggleShowPassword = () => setShowPassword((prev) => !prev);\n  const toggleShowConfirmPassword = () => setShowConfirmPassword((prev) => !prev);\n\n  return {\n    email,\n    password,\n    confirmPassword,\n    setEmail,\n    setPassword,\n    setConfirmPassword,\n    loading,\n    showPassword,\n    showConfirmPassword,\n    toggleShowPassword,\n    toggleShowConfirmPassword,\n    handleRegister,\n    registerUser,\n  };\n};\n\nexport default useRegisterPage;\n"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,OAASC,KAAK,KAAQ,gBAAgB,CACtC,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,CAAAC,WAAW,KAAM,yBAAyB,CAEjD,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGN,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACO,QAAQ,CAAEC,WAAW,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACS,eAAe,CAAEC,kBAAkB,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAACW,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACa,YAAY,CAAEC,eAAe,CAAC,CAAGd,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAACe,mBAAmB,CAAEC,sBAAsB,CAAC,CAAGhB,QAAQ,CAAC,KAAK,CAAC,CACrE,KAAM,CAAAiB,QAAQ,CAAGf,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAAgB,YAAY,CAAG,KAAAA,CAAOb,KAAK,CAAEE,QAAQ,GAAK,CAC9C,GAAI,CACF,KAAM,CAAAY,IAAI,CAAG,KAAM,CAAAhB,WAAW,CAACiB,QAAQ,CAACf,KAAK,CAAEE,QAAQ,CAAC,CACxDN,KAAK,CAACoB,OAAO,CAAC,yCAAyC,CAAC,CACxDC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAEJ,IAAI,CAACK,MAAM,CAACC,WAAW,CAAC,CAC1DH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAElB,KAAK,CAAC,CAAE;AAC1CY,QAAQ,CAAC,QAAQ,CAAC,CACpB,CAAE,MAAOS,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,CAAEA,KAAK,CAACE,OAAO,CAAC,CAC/C3B,KAAK,CAACyB,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC,CAC5B,CACF,CAAC,CAED,KAAM,CAAAC,cAAc,CAAG,KAAO,CAAAC,CAAC,EAAK,CAClCA,CAAC,CAACC,cAAc,CAAC,CAAC,CAElB,GAAI,CAAC1B,KAAK,EAAI,CAACE,QAAQ,EAAI,CAACE,eAAe,CAAE,CAC3CR,KAAK,CAACyB,KAAK,CAAC,6BAA6B,CAAC,CAC1C,OACF,CAEA,GAAInB,QAAQ,GAAKE,eAAe,CAAE,CAChCR,KAAK,CAACyB,KAAK,CAAC,yBAAyB,CAAC,CACtC,OACF,CAEAd,UAAU,CAAC,IAAI,CAAC,CAChB,KAAM,CAAAM,YAAY,CAACb,KAAK,CAAEE,QAAQ,CAAC,CACnCK,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAED,KAAM,CAAAoB,kBAAkB,CAAGA,CAAA,GAAMlB,eAAe,CAAEmB,IAAI,EAAK,CAACA,IAAI,CAAC,CACjE,KAAM,CAAAC,yBAAyB,CAAGA,CAAA,GAAMlB,sBAAsB,CAAEiB,IAAI,EAAK,CAACA,IAAI,CAAC,CAE/E,MAAO,CACL5B,KAAK,CACLE,QAAQ,CACRE,eAAe,CACfH,QAAQ,CACRE,WAAW,CACXE,kBAAkB,CAClBC,OAAO,CACPE,YAAY,CACZE,mBAAmB,CACnBiB,kBAAkB,CAClBE,yBAAyB,CACzBL,cAAc,CACdX,YACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAd,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}