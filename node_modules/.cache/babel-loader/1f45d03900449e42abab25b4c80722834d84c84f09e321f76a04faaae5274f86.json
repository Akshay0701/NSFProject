{"ast":null,"code":"var _jsxFileName = \"/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/ProtectedRoutes.js\",\n  _s = $RefreshSig$();\n// ProtectedRoutes.js\nimport React, { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { isAuthenticated } from './utils/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  element\n}) => {\n  _s();\n  const [authChecked, setAuthChecked] = useState(false);\n  const [allowed, setAllowed] = useState(false);\n  useEffect(() => {\n    const checkAuth = async () => {\n      const result = await isAuthenticated();\n      setAllowed(result);\n      setAuthChecked(true);\n    };\n    checkAuth();\n  }, []);\n  if (!authChecked) return null; // or a loading spinner\n\n  return allowed ? element : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 30\n  }, this);\n};\n_s(ProtectedRoute, \"YCigRvYKNg2GVuiO8LIXicnUZEw=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","isAuthenticated","jsxDEV","_jsxDEV","ProtectedRoute","element","_s","authChecked","setAuthChecked","allowed","setAllowed","checkAuth","result","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/ProtectedRoutes.js"],"sourcesContent":["// ProtectedRoutes.js\nimport React, { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { isAuthenticated } from './utils/auth';\n\nconst ProtectedRoute = ({ element }) => {\n  const [authChecked, setAuthChecked] = useState(false);\n  const [allowed, setAllowed] = useState(false);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      const result = await isAuthenticated();\n      setAllowed(result);\n      setAuthChecked(true);\n    };\n    checkAuth();\n  }, []);\n\n  if (!authChecked) return null; // or a loading spinner\n\n  return allowed ? element : <Navigate to=\"/login\" replace />;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,eAAe,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,MAAM,GAAG,MAAMX,eAAe,CAAC,CAAC;MACtCS,UAAU,CAACE,MAAM,CAAC;MAClBJ,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC;IACDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACJ,WAAW,EAAE,OAAO,IAAI,CAAC,CAAC;;EAE/B,OAAOE,OAAO,GAAGJ,OAAO,gBAAGF,OAAA,CAACH,QAAQ;IAACa,EAAE,EAAC,QAAQ;IAACC,OAAO;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC7D,CAAC;AAACZ,EAAA,CAhBIF,cAAc;AAAAe,EAAA,GAAdf,cAAc;AAkBpB,eAAeA,cAAc;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}