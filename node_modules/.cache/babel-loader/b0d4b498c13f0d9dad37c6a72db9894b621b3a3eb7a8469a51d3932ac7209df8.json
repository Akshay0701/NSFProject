{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport computingService from '../services/computingService';\nimport useCreateTeams from './useCreateTeams';\nconst useProfilePage = () => {\n  _s();\n  const {\n    roomId\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    createTeams,\n    isCreatingTeams\n  } = useCreateTeams();\n  const [profiles, setProfiles] = useState([]);\n  const fetchExtractedKeywords = useCallback(async roomID => {\n    try {\n      const data = await computingService.getExtractedKeywords(roomID);\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching extracted keywords:', error);\n      toast.error('Failed to fetch extracted keywords.');\n      return [];\n    }\n  }, []);\n  const loadProfiles = useCallback(async () => {\n    if (!roomId) return;\n    try {\n      const keywords = await fetchExtractedKeywords(roomId);\n      setProfiles(keywords || []);\n    } catch (error) {\n      toast.error(\"Failed to load research profiles.\");\n    }\n  }, [roomId, fetchExtractedKeywords]);\n  const handleGenerateTeams = useCallback(async () => {\n    if (!roomId) return;\n    await createTeams(roomId);\n  }, [roomId, createTeams]);\n  useEffect(() => {\n    loadProfiles();\n  }, [loadProfiles]);\n  return {\n    profiles,\n    roomId,\n    navigate,\n    isCreatingTeams,\n    handleGenerateTeams\n  };\n};\n_s(useProfilePage, \"cWLY+Bhe/r/00JglpeW9ivmjaoU=\", false, function () {\n  return [useParams, useNavigate, useCreateTeams];\n});\nexport default useProfilePage;","map":{"version":3,"names":["useCallback","useEffect","useState","useNavigate","useParams","toast","computingService","useCreateTeams","useProfilePage","_s","roomId","navigate","createTeams","isCreatingTeams","profiles","setProfiles","fetchExtractedKeywords","roomID","data","getExtractedKeywords","error","console","loadProfiles","keywords","handleGenerateTeams"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/hooks/useProfilePage.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport computingService from '../services/computingService';\nimport useCreateTeams from './useCreateTeams';\n\nconst useProfilePage = () => {\n  const { roomId } = useParams();\n  const navigate = useNavigate();\n  const { createTeams, isCreatingTeams } = useCreateTeams();\n\n  const [profiles, setProfiles] = useState([]);\n\n  const fetchExtractedKeywords = useCallback(async (roomID) => {\n    try {\n      const data = await computingService.getExtractedKeywords(roomID);\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching extracted keywords:', error);\n      toast.error('Failed to fetch extracted keywords.');\n      return [];\n    }\n  }, []);\n\n  const loadProfiles = useCallback(async () => {\n    if (!roomId) return;\n    try {\n      const keywords = await fetchExtractedKeywords(roomId);\n      setProfiles(keywords || []);\n    } catch (error) {\n      toast.error(\"Failed to load research profiles.\");\n    }\n  }, [roomId, fetchExtractedKeywords]);\n\n  const handleGenerateTeams = useCallback(async () => {\n    if (!roomId) return;\n    await createTeams(roomId);\n  }, [roomId, createTeams]);\n\n  useEffect(() => {\n    loadProfiles();\n  }, [loadProfiles]);\n\n  return {\n    profiles,\n    roomId,\n    navigate,\n    isCreatingTeams,\n    handleGenerateTeams,\n  };\n};\n\nexport default useProfilePage;\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,gBAAgB,MAAM,8BAA8B;AAC3D,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAO,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC9B,MAAMO,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAES,WAAW;IAAEC;EAAgB,CAAC,GAAGN,cAAc,CAAC,CAAC;EAEzD,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMc,sBAAsB,GAAGhB,WAAW,CAAC,MAAOiB,MAAM,IAAK;IAC3D,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMZ,gBAAgB,CAACa,oBAAoB,CAACF,MAAM,CAAC;MAChE,OAAOC,IAAI,IAAI,EAAE;IACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1Df,KAAK,CAACe,KAAK,CAAC,qCAAqC,CAAC;MAClD,OAAO,EAAE;IACX;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,YAAY,GAAGtB,WAAW,CAAC,YAAY;IAC3C,IAAI,CAACU,MAAM,EAAE;IACb,IAAI;MACF,MAAMa,QAAQ,GAAG,MAAMP,sBAAsB,CAACN,MAAM,CAAC;MACrDK,WAAW,CAACQ,QAAQ,IAAI,EAAE,CAAC;IAC7B,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdf,KAAK,CAACe,KAAK,CAAC,mCAAmC,CAAC;IAClD;EACF,CAAC,EAAE,CAACV,MAAM,EAAEM,sBAAsB,CAAC,CAAC;EAEpC,MAAMQ,mBAAmB,GAAGxB,WAAW,CAAC,YAAY;IAClD,IAAI,CAACU,MAAM,EAAE;IACb,MAAME,WAAW,CAACF,MAAM,CAAC;EAC3B,CAAC,EAAE,CAACA,MAAM,EAAEE,WAAW,CAAC,CAAC;EAEzBX,SAAS,CAAC,MAAM;IACdqB,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,OAAO;IACLR,QAAQ;IACRJ,MAAM;IACNC,QAAQ;IACRE,eAAe;IACfW;EACF,CAAC;AACH,CAAC;AAACf,EAAA,CA5CID,cAAc;EAAA,QACCJ,SAAS,EACXD,WAAW,EACaI,cAAc;AAAA;AA2CzD,eAAeC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}