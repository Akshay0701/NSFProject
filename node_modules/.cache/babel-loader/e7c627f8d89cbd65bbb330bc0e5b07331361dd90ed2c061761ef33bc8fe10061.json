{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport roomService from '../services/roomService';\nimport { toast } from 'react-toastify';\nconst useRoom = () => {\n  _s();\n  const fetchRoomData = useCallback(async roomId => {\n    try {\n      const data = await roomService.getRoomData(roomId);\n      console.log('data at useRoom page:', data);\n      return data;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load room data.');\n      return null;\n    }\n  }, []);\n  const extractTextFromPDF = useCallback(async pdfFile => {\n    try {\n      const data = await roomService.extractTextFromPDF(pdfFile);\n      return data.text; // expects { text: '...' }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to extract text from PDF.');\n      return '';\n    }\n  }, []);\n  const removeProfile = useCallback(async ({\n    roomID,\n    email,\n    senderEmail\n  }) => {\n    try {\n      const result = await roomService.removeProfileFromRoom({\n        roomID,\n        email,\n        senderEmail\n      });\n      toast.success('Profile removed successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to remove profile.');\n      throw err;\n    }\n  }, []);\n  const addProfile = useCallback(async ({\n    roomID,\n    name,\n    email,\n    description\n  }) => {\n    try {\n      const result = await roomService.addProfileToRoom({\n        roomID,\n        name,\n        email,\n        description\n      });\n      toast.success('Profile added successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to add profile.');\n      throw err;\n    }\n  }, []);\n  const createRoom = useCallback(async creatorID => {\n    try {\n      const result = await roomService.createRoom(creatorID);\n      toast.success('Room created successfully.');\n      return result; // { message, RoomID }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to create room.');\n      throw err;\n    }\n  }, []);\n  const getRoomsByEmail = useCallback(async email => {\n    try {\n      const data = await roomService.getRoomsByEmail(email);\n      return data.rooms || [];\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to fetch rooms by email.');\n      return [];\n    }\n  }, []);\n  return {\n    fetchRoomData,\n    extractTextFromPDF,\n    addProfile,\n    removeProfile,\n    createRoom,\n    getRoomsByEmail\n  };\n};\n_s(useRoom, \"9UBvJl/Q5DQE9i+tmHK2CRPdCLU=\");\nexport default useRoom;","map":{"version":3,"names":["useCallback","roomService","toast","useRoom","_s","fetchRoomData","roomId","data","getRoomData","console","log","err","error","extractTextFromPDF","pdfFile","text","removeProfile","roomID","email","senderEmail","result","removeProfileFromRoom","success","addProfile","name","description","addProfileToRoom","createRoom","creatorID","getRoomsByEmail","rooms"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/hooks/useRoom.js"],"sourcesContent":["import { useCallback } from 'react';\nimport roomService from '../services/roomService';\nimport { toast } from 'react-toastify';\n\nconst useRoom = () => {\n  const fetchRoomData = useCallback(async (roomId) => {\n    try {\n      const data = await roomService.getRoomData(roomId);\n      console.log('data at useRoom page:', data);\n      return data;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load room data.');\n      return null;\n    }\n  }, []);\n\n  const extractTextFromPDF = useCallback(async (pdfFile) => {\n    try {\n      const data = await roomService.extractTextFromPDF(pdfFile);\n      return data.text; // expects { text: '...' }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to extract text from PDF.');\n      return '';\n    }\n  }, []);\n\n  const removeProfile = useCallback(async ({ roomID, email, senderEmail }) => {\n    try {\n      const result = await roomService.removeProfileFromRoom({ roomID, email, senderEmail });\n      toast.success('Profile removed successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to remove profile.');\n      throw err;\n    }\n  }, []);\n\n  const addProfile = useCallback(async ({ roomID, name, email, description }) => {\n    try {\n      const result = await roomService.addProfileToRoom({ roomID, name, email, description });\n      toast.success('Profile added successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to add profile.');\n      throw err;\n    }\n  }, []);\n\n  const createRoom = useCallback(async (creatorID) => {\n    try {\n      const result = await roomService.createRoom(creatorID);\n      toast.success('Room created successfully.');\n      return result; // { message, RoomID }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to create room.');\n      throw err;\n    }\n  }, []);\n\n  const getRoomsByEmail = useCallback(async (email) => {\n    try {\n      const data = await roomService.getRoomsByEmail(email);\n      return data.rooms || [];\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to fetch rooms by email.');\n      return [];\n    }\n  }, []);\n\n  return {\n    fetchRoomData,\n    extractTextFromPDF,\n    addProfile,\n    removeProfile,\n    createRoom,\n    getRoomsByEmail,\n  };\n};\n\nexport default useRoom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}