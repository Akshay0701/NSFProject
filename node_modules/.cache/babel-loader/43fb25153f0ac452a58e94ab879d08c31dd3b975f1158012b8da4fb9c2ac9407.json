{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport useProfileStore from '../store/profileStore';\nconst useExtractInterests = () => {\n  _s();\n  const [isLoading, setIsLoadingState] = useState(false);\n  const navigate = useNavigate();\n  const {\n    setExtractedProfiles,\n    setIsLoading\n  } = useProfileStore();\n  const extractInterests = async profiles => {\n    setIsLoadingState(true);\n    setIsLoading(true);\n    const formData = new FormData();\n    const apiData = profiles.map(profile => ({\n      name: profile.name,\n      description: profile.text\n    }));\n    formData.append('profiles', JSON.stringify(apiData));\n    profiles.forEach((profile, index) => {\n      if (profile.pdfFile) {\n        formData.append(`pdf${index}`, profile.pdfFile);\n      }\n    });\n    try {\n      const response = await fetch('http://127.0.0.1:5000/nsf/extract_interests', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch research interests');\n      }\n      const data = await response.json();\n      setExtractedProfiles(data); // Store the extracted profiles in Zustand\n      navigate('/profiles');\n    } catch (error) {\n      alert('Error extracting research interests. Please try again.');\n      console.error(error);\n    } finally {\n      setIsLoadingState(false);\n      setIsLoading(false);\n    }\n  };\n  return {\n    extractInterests,\n    isLoading\n  };\n};\n_s(useExtractInterests, \"WrGJnkzgsPdRsd6g1pfU56jP4R8=\", false, function () {\n  return [useNavigate, useProfileStore];\n});\nexport default useExtractInterests;","map":{"version":3,"names":["useNavigate","useState","useProfileStore","useExtractInterests","_s","isLoading","setIsLoadingState","navigate","setExtractedProfiles","setIsLoading","extractInterests","profiles","formData","FormData","apiData","map","profile","name","description","text","append","JSON","stringify","forEach","index","pdfFile","response","fetch","method","body","ok","Error","data","json","error","alert","console"],"sources":["/Users/akshayjadhav/Documents/GAWork/NSFProject/src/hooks/useExtractInterests.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport useProfileStore from '../store/profileStore';\n\nconst useExtractInterests = () => {\n  const [isLoading, setIsLoadingState] = useState(false);\n  const navigate = useNavigate();\n  const { setExtractedProfiles, setIsLoading } = useProfileStore();\n\n  const extractInterests = async (profiles) => {\n    setIsLoadingState(true);\n    setIsLoading(true);\n\n    const formData = new FormData();\n    const apiData = profiles.map((profile) => ({\n      name: profile.name,\n      description: profile.text,\n    }));\n\n    formData.append('profiles', JSON.stringify(apiData));\n    profiles.forEach((profile, index) => {\n      if (profile.pdfFile) {\n        formData.append(`pdf${index}`, profile.pdfFile);\n      }\n    });\n\n    try {\n      const response = await fetch('http://127.0.0.1:5000/nsf/extract_interests', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch research interests');\n      }\n\n      const data = await response.json();\n      setExtractedProfiles(data); // Store the extracted profiles in Zustand\n      navigate('/profiles');\n    } catch (error) {\n      alert('Error extracting research interests. Please try again.');\n      console.error(error);\n    } finally {\n      setIsLoadingState(false);\n      setIsLoading(false);\n    }\n  };\n\n  return { extractInterests, isLoading };\n};\n\nexport default useExtractInterests;"],"mappings":";AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,eAAe,MAAM,uBAAuB;AAEnD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,iBAAiB,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACtD,MAAMM,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEQ,oBAAoB;IAAEC;EAAa,CAAC,GAAGP,eAAe,CAAC,CAAC;EAEhE,MAAMQ,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;IAC3CL,iBAAiB,CAAC,IAAI,CAAC;IACvBG,YAAY,CAAC,IAAI,CAAC;IAElB,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/B,MAAMC,OAAO,GAAGH,QAAQ,CAACI,GAAG,CAAEC,OAAO,KAAM;MACzCC,IAAI,EAAED,OAAO,CAACC,IAAI;MAClBC,WAAW,EAAEF,OAAO,CAACG;IACvB,CAAC,CAAC,CAAC;IAEHP,QAAQ,CAACQ,MAAM,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACR,OAAO,CAAC,CAAC;IACpDH,QAAQ,CAACY,OAAO,CAAC,CAACP,OAAO,EAAEQ,KAAK,KAAK;MACnC,IAAIR,OAAO,CAACS,OAAO,EAAE;QACnBb,QAAQ,CAACQ,MAAM,CAAC,MAAMI,KAAK,EAAE,EAAER,OAAO,CAACS,OAAO,CAAC;MACjD;IACF,CAAC,CAAC;IAEF,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;QAC1EC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEjB;MACR,CAAC,CAAC;MAEF,IAAI,CAACc,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;MACvD;MAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCzB,oBAAoB,CAACwB,IAAI,CAAC,CAAC,CAAC;MAC5BzB,QAAQ,CAAC,WAAW,CAAC;IACvB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdC,KAAK,CAAC,wDAAwD,CAAC;MAC/DC,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,SAAS;MACR5B,iBAAiB,CAAC,KAAK,CAAC;MACxBG,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IAAEC,gBAAgB;IAAEL;EAAU,CAAC;AACxC,CAAC;AAACD,EAAA,CA7CID,mBAAmB;EAAA,QAENH,WAAW,EACmBE,eAAe;AAAA;AA4ChE,eAAeC,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}