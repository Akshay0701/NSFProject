{"ast":null,"code":"var _s = $RefreshSig$();\nimport roomService from '../services/roomService';\nimport computingService from '../services/computingService';\nimport { useEffect, useState, useCallback } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nconst useRoomPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    roomId\n  } = useParams();\n  const [room, setRoom] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [extracting, setExtracting] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [inputMethod, setInputMethod] = useState('description');\n  const [addProfileText, setAddProfileText] = useState('Add Profile');\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    description: '',\n    pdfFile: null\n  });\n  const userEmail = localStorage.getItem('userEmail');\n  const fetchRoomData = useCallback(async roomId => {\n    try {\n      const data = await roomService.getRoomData(roomId);\n      console.log('data at useRoom page:', data);\n      return data;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load room data.');\n      return null;\n    }\n  }, []);\n  const extractTextFromPDF = useCallback(async pdfFile => {\n    try {\n      const data = await computingService.extractTextFromPDF(pdfFile);\n      return data.text; // expects { text: '...' }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to extract text from PDF.');\n      return '';\n    }\n  }, []);\n  const extractTextFromLink = useCallback(async link => {\n    try {\n      const data = await computingService.extractTextFromLink(link);\n      return data.text; // expects { text: '...' }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to extract text from PDF.');\n      return '';\n    }\n  }, []);\n  const removeProfile = useCallback(async ({\n    roomID,\n    email,\n    senderEmail\n  }) => {\n    try {\n      const result = await roomService.removeProfileFromRoom({\n        roomID,\n        email,\n        senderEmail\n      });\n      toast.success('Profile removed successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to remove profile.');\n      throw err;\n    }\n  }, []);\n  const addProfile = useCallback(async ({\n    roomID,\n    name,\n    email,\n    description\n  }) => {\n    try {\n      const result = await roomService.addProfileToRoom({\n        roomID,\n        name,\n        email,\n        description\n      });\n      toast.success('Profile added successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error(`${err.message}`);\n      throw err;\n    }\n  }, []);\n  const extracted_keywords = useCallback(async roomID => {\n    try {\n      const data = await computingService.extractResearchKeywords(roomID);\n      navigate(`/room/${roomID}/profiles`);\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to extract keywords from room.');\n      return [];\n    }\n  }, []);\n  const fetchTeams = useCallback(async roomID => {\n    try {\n      const data = await roomService.getTeamsByRoom(roomID);\n      return data;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load teams data');\n      return [];\n    }\n  }, []);\n  const loadRoom = useCallback(async () => {\n    setLoading(true);\n    const data = await fetchRoomData(roomId);\n    setRoom(data);\n    setLoading(false);\n  }, [fetchRoomData, roomId]);\n  useEffect(() => {\n    loadRoom();\n  }, [loadRoom]);\n  const handleExtractResearch = async () => {\n    try {\n      setExtracting(true);\n      const keywords = await extracted_keywords(roomId);\n      if (!keywords.length) {\n        toast.error('No research keywords extracted.');\n      }\n    } catch (err) {} finally {\n      setExtracting(false);\n    }\n  };\n  const handleDeleteProfile = async emailToRemove => {\n    if (!window.confirm('Are you sure you want to remove this profile?')) return;\n    try {\n      await removeProfile({\n        roomID: roomId,\n        email: emailToRemove,\n        senderEmail: userEmail\n      });\n      await loadRoom();\n    } catch (error) {\n      toast.error('Failed to remove profile.');\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value,\n      files\n    } = e.target;\n    if (name === 'pdfFile') {\n      setFormData(prev => ({\n        ...prev,\n        pdfFile: files[0]\n      }));\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n  const handleAddProfile = async e => {\n    e.preventDefault();\n    const {\n      name,\n      email,\n      description,\n      pdfFile,\n      websiteLink\n    } = formData;\n\n    // Validate required fields\n    const isInvalid = !name || !email || inputMethod === 'description' && !description || inputMethod === 'pdf' && !pdfFile || inputMethod === 'link' && !websiteLink;\n    if (isInvalid) {\n      toast.error('Please fill in all required fields');\n      return;\n    }\n    try {\n      let finalDescription = description;\n\n      // If using PDF input\n      if (inputMethod === 'pdf' && pdfFile) {\n        const extractedText = await extractTextFromPDF(pdfFile);\n        if (!extractedText) {\n          toast.error('Failed to extract text from PDF.');\n          return;\n        }\n        finalDescription = extractedText;\n      }\n\n      // If using Link input\n      if (inputMethod === 'link' && websiteLink) {\n        try {\n          const extractedText = await extractTextFromLink(websiteLink);\n          if (!extractedText) {\n            toast.error('Failed to extract text from the website.');\n            return;\n          }\n          finalDescription = extractedText;\n        } catch (err) {\n          toast.error('Error extracting text from the link.');\n          return;\n        }\n      }\n      await addProfile({\n        roomID: roomId,\n        name,\n        email,\n        description: finalDescription\n      });\n      await loadRoom();\n      setShowModal(false);\n      setFormData({\n        name: '',\n        email: '',\n        description: '',\n        pdfFile: null,\n        websiteLink: ''\n      });\n    } catch (err) {\n      console.error('Error adding profile:', err);\n      toast.error('Failed to add profile. Please try again.');\n    }\n  };\n  return {\n    roomId,\n    room,\n    setRoom,\n    userEmail,\n    loading,\n    extracting,\n    showModal,\n    addProfileText,\n    setShowModal,\n    inputMethod,\n    setInputMethod,\n    formData,\n    setFormData,\n    handleAddProfile,\n    handleDeleteProfile,\n    setAddProfileText,\n    handleInputChange,\n    handleExtractResearch,\n    fetchTeams\n  };\n};\n_s(useRoomPage, \"8BRIoeaYHbYLjGdJaSstWNxTlfM=\", false, function () {\n  return [useNavigate, useParams];\n});\nexport default useRoomPage;","map":{"version":3,"names":["roomService","computingService","useEffect","useState","useCallback","useNavigate","useParams","toast","useRoomPage","_s","navigate","roomId","room","setRoom","loading","setLoading","extracting","setExtracting","showModal","setShowModal","inputMethod","setInputMethod","addProfileText","setAddProfileText","formData","setFormData","name","email","description","pdfFile","userEmail","localStorage","getItem","fetchRoomData","data","getRoomData","console","log","err","error","extractTextFromPDF","text","extractTextFromLink","link","removeProfile","roomID","senderEmail","result","removeProfileFromRoom","success","addProfile","addProfileToRoom","message","extracted_keywords","extractResearchKeywords","fetchTeams","getTeamsByRoom","loadRoom","handleExtractResearch","keywords","length","handleDeleteProfile","emailToRemove","window","confirm","handleInputChange","e","value","files","target","prev","handleAddProfile","preventDefault","websiteLink","isInvalid","finalDescription","extractedText"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/hooks/useRoomPage.js"],"sourcesContent":["import roomService from '../services/roomService';\nimport computingService from '../services/computingService';\nimport { useEffect, useState, useCallback } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nconst useRoomPage = () => {\n  const navigate = useNavigate();\n  const { roomId } = useParams();\n  const [room, setRoom] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [extracting, setExtracting] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [inputMethod, setInputMethod] = useState('description');\n  const [addProfileText, setAddProfileText] = useState('Add Profile');\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    description: '',\n    pdfFile: null,\n  });\n\n  const userEmail = localStorage.getItem('userEmail');\n\n\n  const fetchRoomData = useCallback(async (roomId) => {\n    try {\n      const data = await roomService.getRoomData(roomId);\n      console.log('data at useRoom page:', data);\n      return data;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load room data.');\n      return null;\n    }\n  }, []);\n\n  const extractTextFromPDF = useCallback(async (pdfFile) => {\n    try {\n      const data = await computingService.extractTextFromPDF(pdfFile);\n      return data.text; // expects { text: '...' }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to extract text from PDF.');\n      return '';\n    }\n  }, []);\n\n  const extractTextFromLink = useCallback(async (link) => {\n    try {\n      const data = await computingService.extractTextFromLink(link);\n      return data.text; // expects { text: '...' }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to extract text from PDF.');\n      return '';\n    }\n  }, []);\n\n  const removeProfile = useCallback(async ({ roomID, email, senderEmail }) => {\n    try {\n      const result = await roomService.removeProfileFromRoom({ roomID, email, senderEmail });\n      toast.success('Profile removed successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to remove profile.');\n      throw err;\n    }\n  }, []);\n\n  const addProfile = useCallback(async ({ roomID, name, email, description }) => {\n    try {\n      const result = await roomService.addProfileToRoom({ roomID, name, email, description });\n      toast.success('Profile added successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error(`${err.message}`);\n      throw err;\n    }\n  }, []);\n\n  const extracted_keywords = useCallback(async (roomID) => {\n    try {\n      const data = await computingService.extractResearchKeywords(roomID);\n      navigate(`/room/${roomID}/profiles`);\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to extract keywords from room.');\n      return [];\n    }\n  }, []);\n\n  const fetchTeams = useCallback(async (roomID) => {\n    try {\n      const data = await roomService.getTeamsByRoom(roomID);\n      return data; \n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load teams data');\n      return [];\n    }\n  }, []);\n\n  const loadRoom = useCallback(async () => {\n    setLoading(true);\n    const data = await fetchRoomData(roomId);\n    setRoom(data);\n    setLoading(false);\n  }, [fetchRoomData, roomId]);\n\n  useEffect(() => {\n    loadRoom();\n  }, [loadRoom]);\n\n  const handleExtractResearch = async () => {\n    try {\n      setExtracting(true);\n      const keywords = await extracted_keywords(roomId);\n      if (!keywords.length) {\n        toast.error('No research keywords extracted.');\n      }\n    } catch (err) {\n    } finally {\n      setExtracting(false);\n    }\n  };\n\n  const handleDeleteProfile = async (emailToRemove) => {\n    if (!window.confirm('Are you sure you want to remove this profile?')) return;\n\n    try {\n      await removeProfile({\n        roomID: roomId,\n        email: emailToRemove,\n        senderEmail: userEmail,\n      });\n      await loadRoom();\n    } catch (error) {\n      toast.error('Failed to remove profile.');\n    }\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value, files } = e.target;\n    if (name === 'pdfFile') {\n      setFormData((prev) => ({ ...prev, pdfFile: files[0] }));\n    } else {\n      setFormData((prev) => ({ ...prev, [name]: value }));\n    }\n  };\n\n  const handleAddProfile = async (e) => {\n    e.preventDefault();\n    const { name, email, description, pdfFile, websiteLink } = formData;\n  \n    // Validate required fields\n    const isInvalid =\n      !name ||\n      !email ||\n      (inputMethod === 'description' && !description) ||\n      (inputMethod === 'pdf' && !pdfFile) ||\n      (inputMethod === 'link' && !websiteLink);\n  \n    if (isInvalid) {\n      toast.error('Please fill in all required fields');\n      return;\n    }\n  \n    try {\n      let finalDescription = description;\n  \n      // If using PDF input\n      if (inputMethod === 'pdf' && pdfFile) {\n        const extractedText = await extractTextFromPDF(pdfFile);\n        if (!extractedText) {\n          toast.error('Failed to extract text from PDF.');\n          return;\n        }\n        finalDescription = extractedText;\n      }\n  \n      // If using Link input\n      if (inputMethod === 'link' && websiteLink) {\n        try {\n          const extractedText = await extractTextFromLink(websiteLink);\n          if (!extractedText) {\n            toast.error('Failed to extract text from the website.');\n            return;\n          }\n          finalDescription = extractedText;\n        } catch (err) {\n          toast.error('Error extracting text from the link.');\n          return;\n        }\n      }\n  \n      await addProfile({ roomID: roomId, name, email, description: finalDescription });\n      await loadRoom();\n  \n      setShowModal(false);\n      setFormData({ name: '', email: '', description: '', pdfFile: null, websiteLink: '' });\n  \n    } catch (err) {\n      console.error('Error adding profile:', err);\n      toast.error('Failed to add profile. Please try again.');\n    }\n  };  \n\n  return {\n    roomId,\n    room,\n    setRoom,\n    userEmail,\n    loading,\n    extracting,\n    showModal,\n    addProfileText,\n    setShowModal,\n    inputMethod,\n    setInputMethod,\n    formData,\n    setFormData,\n    handleAddProfile,\n    handleDeleteProfile,\n    setAddProfileText,\n    handleInputChange,\n    handleExtractResearch,\n    fetchTeams,\n  };\n};\n\nexport default useRoomPage;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}