{"ast":null,"code":"const BASE_URL='api/nsf/room';const getRoomData=async roomId=>{const response=await fetch(`${BASE_URL}/get-room/${roomId}`);if(!response.ok){throw new Error('Failed to fetch room data');}return await response.json();};const addProfileToRoom=async _ref=>{let{roomID,name,email,description}=_ref;const response=await fetch(`${BASE_URL}/add-profile`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({RoomID:roomID,name,email,description})});if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to add profile to room');}return response.json();};const removeProfileFromRoom=async _ref2=>{let{roomID,email,senderEmail}=_ref2;const response=await fetch(`${BASE_URL}/remove-profile`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({RoomID:roomID,email,sender_email:senderEmail})});if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to remove profile from room');}return response.json();};const createRoom=async creatorID=>{const response=await fetch(`${BASE_URL}/create-room`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({creator_id:creatorID})});if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to create room');}return response.json();// { message: \"...\", RoomID: \"...\" }\n};const getRoomsByEmail=async email=>{const response=await fetch(`${BASE_URL}/get-rooms-by-email`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email})});if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to fetch rooms by email');}return response.json();// { rooms: [...] }\n};const removeRoomData=async _ref3=>{let{roomID,email}=_ref3;const response=await fetch(`${BASE_URL}/remove-room`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({RoomID:roomID,email})});if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to delete room');}return response.json();};const createTeamsFromRoom=async roomID=>{const response=await fetch(`${BASE_URL}/create-team`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({RoomID:roomID})});if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to create teams');}return response.json();// { teams: [...] }\n};const getTeamsByRoom=async roomID=>{const response=await fetch(`${BASE_URL}/get-teams`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({RoomID:roomID})});if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to fetch teams');}return response.json();// Expected to be an array of teams\n};export default{getRoomData,getTeamsByRoom,addProfileToRoom,removeProfileFromRoom,createRoom,getRoomsByEmail,removeRoomData,createTeamsFromRoom};","map":{"version":3,"names":["BASE_URL","getRoomData","roomId","response","fetch","ok","Error","json","addProfileToRoom","_ref","roomID","name","email","description","method","headers","body","JSON","stringify","RoomID","error","removeProfileFromRoom","_ref2","senderEmail","sender_email","createRoom","creatorID","creator_id","getRoomsByEmail","removeRoomData","_ref3","createTeamsFromRoom","getTeamsByRoom"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFProject/src/services/roomService.js"],"sourcesContent":["const BASE_URL = 'api/nsf/room';\n\nconst getRoomData = async (roomId) => {\n  const response = await fetch(`${BASE_URL}/get-room/${roomId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch room data');\n  }\n  return await response.json();\n};\n\nconst addProfileToRoom = async ({ roomID, name, email, description }) => {\n  const response = await fetch(`${BASE_URL}/add-profile`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID, name, email, description }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to add profile to room');\n  }\n\n  return response.json();\n};\n\nconst removeProfileFromRoom = async ({ roomID, email, senderEmail }) => {\n  const response = await fetch(`${BASE_URL}/remove-profile`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID, email, sender_email: senderEmail }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to remove profile from room');\n  }\n\n  return response.json();\n};\n\nconst createRoom = async (creatorID) => {\n  const response = await fetch(`${BASE_URL}/create-room`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ creator_id: creatorID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to create room');\n  }\n\n  return response.json();  // { message: \"...\", RoomID: \"...\" }\n};\n\nconst getRoomsByEmail = async (email) => {\n  const response = await fetch(`${BASE_URL}/get-rooms-by-email`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch rooms by email');\n  }\n\n  return response.json();  // { rooms: [...] }\n};\n\nconst removeRoomData = async ({roomID, email}) => {\n  const response = await fetch(`${BASE_URL}/remove-room`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID, email }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to delete room');\n  }\n\n  return response.json();  \n}\n\nconst createTeamsFromRoom = async (roomID) => {\n  const response = await fetch(`${BASE_URL}/create-team`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to create teams');\n  }\n\n  return response.json();  // { teams: [...] }\n};\n\nconst getTeamsByRoom = async (roomID) => {\n  const response = await fetch(`${BASE_URL}/get-teams`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch teams');\n  }\n\n  return response.json(); // Expected to be an array of teams\n};\n\nexport default {\n  getRoomData,\n  getTeamsByRoom,\n  addProfileToRoom,\n  removeProfileFromRoom,\n  createRoom,\n  getRoomsByEmail,\n  removeRoomData,\n  createTeamsFromRoom,\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}