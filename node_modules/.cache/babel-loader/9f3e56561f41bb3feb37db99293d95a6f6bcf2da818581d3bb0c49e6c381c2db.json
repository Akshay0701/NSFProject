{"ast":null,"code":"const BASE_URL = 'http://127.0.0.1:5000/room';\nconst getRoomData = async roomId => {\n  const response = await fetch(`${BASE_URL}/get-room/${roomId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch room data');\n  }\n  return await response.json();\n};\nconst addProfileToRoom = async ({\n  roomID,\n  name,\n  email,\n  description\n}) => {\n  const response = await fetch(`${BASE_URL}/add-profile`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID,\n      name,\n      email,\n      description\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to add profile to room');\n  }\n  return response.json();\n};\nconst removeProfileFromRoom = async ({\n  roomID,\n  email,\n  senderEmail\n}) => {\n  const response = await fetch(`${BASE_URL}/remove-profile`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID,\n      email,\n      sender_email: senderEmail\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to remove profile from room');\n  }\n  return response.json();\n};\nconst createRoom = async creatorID => {\n  const response = await fetch(`${BASE_URL}/create-room`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      creator_id: creatorID\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to create room');\n  }\n  return response.json(); // { message: \"...\", RoomID: \"...\" }\n};\nconst getRoomsByEmail = async email => {\n  const response = await fetch(`${BASE_URL}/get-rooms-by-email`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch rooms by email');\n  }\n  return response.json(); // { rooms: [...] }\n};\nconst removeRoomData = async ({\n  roomID,\n  email\n}) => {\n  const response = await fetch(`${BASE_URL}/remove-room`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID,\n      email\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to delete room');\n  }\n  return response.json();\n};\nconst createTeamsFromRoom = async roomID => {\n  const response = await fetch(`${BASE_URL}/create-team`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to create teams');\n  }\n  return response.json(); // { teams: [...] }\n};\nconst getTeamsByRoom = async roomID => {\n  const response = await fetch(`${BASE_URL}/get-teams`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch teams');\n  }\n  return response.json(); // Expected to be an array of teams\n};\nexport default {\n  getRoomData,\n  getTeamsByRoom,\n  addProfileToRoom,\n  removeProfileFromRoom,\n  createRoom,\n  getRoomsByEmail,\n  removeRoomData,\n  createTeamsFromRoom\n};","map":{"version":3,"names":["BASE_URL","getRoomData","roomId","response","fetch","ok","Error","json","addProfileToRoom","roomID","name","email","description","method","headers","body","JSON","stringify","RoomID","error","removeProfileFromRoom","senderEmail","sender_email","createRoom","creatorID","creator_id","getRoomsByEmail","removeRoomData","createTeamsFromRoom","getTeamsByRoom"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/services/roomService.js"],"sourcesContent":["const BASE_URL = 'http://127.0.0.1:5000/room';\n\nconst getRoomData = async (roomId) => {\n  const response = await fetch(`${BASE_URL}/get-room/${roomId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch room data');\n  }\n  return await response.json();\n};\n\nconst addProfileToRoom = async ({ roomID, name, email, description }) => {\n  const response = await fetch(`${BASE_URL}/add-profile`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID, name, email, description }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to add profile to room');\n  }\n\n  return response.json();\n};\n\nconst removeProfileFromRoom = async ({ roomID, email, senderEmail }) => {\n  const response = await fetch(`${BASE_URL}/remove-profile`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID, email, sender_email: senderEmail }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to remove profile from room');\n  }\n\n  return response.json();\n};\n\nconst createRoom = async (creatorID) => {\n  const response = await fetch(`${BASE_URL}/create-room`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ creator_id: creatorID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to create room');\n  }\n\n  return response.json();  // { message: \"...\", RoomID: \"...\" }\n};\n\nconst getRoomsByEmail = async (email) => {\n  const response = await fetch(`${BASE_URL}/get-rooms-by-email`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch rooms by email');\n  }\n\n  return response.json();  // { rooms: [...] }\n};\n\nconst removeRoomData = async ({roomID, email}) => {\n  const response = await fetch(`${BASE_URL}/remove-room`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID, email }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to delete room');\n  }\n\n  return response.json();  \n}\n\nconst createTeamsFromRoom = async (roomID) => {\n  const response = await fetch(`${BASE_URL}/create-team`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to create teams');\n  }\n\n  return response.json();  // { teams: [...] }\n};\n\nconst getTeamsByRoom = async (roomID) => {\n  const response = await fetch(`${BASE_URL}/get-teams`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to fetch teams');\n  }\n\n  return response.json(); // Expected to be an array of teams\n};\n\nexport default {\n  getRoomData,\n  getTeamsByRoom,\n  addProfileToRoom,\n  removeProfileFromRoom,\n  createRoom,\n  getRoomsByEmail,\n  removeRoomData,\n  createTeamsFromRoom,\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}