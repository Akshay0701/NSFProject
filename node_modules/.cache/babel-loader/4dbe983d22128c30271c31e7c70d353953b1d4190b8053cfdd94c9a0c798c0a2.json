{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify'; // Add toast for error handling\nimport useProfileStore from '../store/profileStore';\nimport nsfService from '../services/nsfService';\nconst useExtractInterests = () => {\n  _s();\n  const [isLoading, setIsLoadingState] = useState(false);\n  const navigate = useNavigate();\n  const {\n    setExtractedProfiles,\n    setIsLoading\n  } = useProfileStore();\n  const extractInterests = async profiles => {\n    setIsLoadingState(true);\n    setIsLoading(true);\n    try {\n      const data = await nsfService.extractInterests(profiles);\n      setExtractedProfiles(data); // Store the extracted profiles in Zustand\n      navigate('/profiles');\n    } catch (error) {\n      console.error(error);\n      toast.error('Error extracting research interests. Please try again.');\n    } finally {\n      setIsLoadingState(false);\n      setIsLoading(false);\n    }\n  };\n  return {\n    extractInterests,\n    isLoading\n  };\n};\n_s(useExtractInterests, \"WrGJnkzgsPdRsd6g1pfU56jP4R8=\", false, function () {\n  return [useNavigate, useProfileStore];\n});\nexport default useExtractInterests;","map":{"version":3,"names":["useNavigate","useState","toast","useProfileStore","nsfService","useExtractInterests","_s","isLoading","setIsLoadingState","navigate","setExtractedProfiles","setIsLoading","extractInterests","profiles","data","error","console"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFProject/src/hooks/useExtractInterests.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify'; // Add toast for error handling\nimport useProfileStore from '../store/profileStore';\nimport nsfService from '../services/nsfService';\n\nconst useExtractInterests = () => {\n  const [isLoading, setIsLoadingState] = useState(false);\n  const navigate = useNavigate();\n  const { setExtractedProfiles, setIsLoading } = useProfileStore();\n\n  const extractInterests = async (profiles) => {\n    setIsLoadingState(true);\n    setIsLoading(true);\n\n    try {\n      const data = await nsfService.extractInterests(profiles);\n      setExtractedProfiles(data); // Store the extracted profiles in Zustand\n      navigate('/profiles');\n    } catch (error) {\n      console.error(error);\n      toast.error('Error extracting research interests. Please try again.');\n    } finally {\n      setIsLoadingState(false);\n      setIsLoading(false);\n    }\n  };\n\n  return { extractInterests, isLoading };\n};\n\nexport default useExtractInterests;"],"mappings":";AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,KAAK,QAAQ,gBAAgB,CAAC,CAAC;AACxC,OAAOC,eAAe,MAAM,uBAAuB;AACnD,OAAOC,UAAU,MAAM,wBAAwB;AAE/C,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACtD,MAAMQ,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEU,oBAAoB;IAAEC;EAAa,CAAC,GAAGR,eAAe,CAAC,CAAC;EAEhE,MAAMS,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;IAC3CL,iBAAiB,CAAC,IAAI,CAAC;IACvBG,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF,MAAMG,IAAI,GAAG,MAAMV,UAAU,CAACQ,gBAAgB,CAACC,QAAQ,CAAC;MACxDH,oBAAoB,CAACI,IAAI,CAAC,CAAC,CAAC;MAC5BL,QAAQ,CAAC,WAAW,CAAC;IACvB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpBb,KAAK,CAACa,KAAK,CAAC,wDAAwD,CAAC;IACvE,CAAC,SAAS;MACRP,iBAAiB,CAAC,KAAK,CAAC;MACxBG,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IAAEC,gBAAgB;IAAEL;EAAU,CAAC;AACxC,CAAC;AAACD,EAAA,CAvBID,mBAAmB;EAAA,QAENL,WAAW,EACmBG,eAAe;AAAA;AAsBhE,eAAeE,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}