{"ast":null,"code":"import { jwtDecode } from 'jwt-decode';\nimport authService from '../services/authService';\nimport { toast } from 'react-toastify';\n\n// Synchronous check — fast, used in routes\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('authToken');\n  if (!token) return false;\n  try {\n    const decoded = jwtDecode(token);\n    return Date.now() < decoded.exp * 1000;\n  } catch {\n    return false;\n  }\n};\n\n// Async version — try refreshing token if expired\nexport const checkAndRefreshAuth = async () => {\n  const token = localStorage.getItem('authToken');\n  const email = localStorage.getItem('userEmail');\n  const refreshToken = localStorage.getItem('refreshToken');\n  if (!token || !email || !refreshToken) return false;\n  try {\n    const decoded = jwtDecode(token);\n    if (Date.now() < decoded.exp * 1000) {\n      // Token still valid\n      return true;\n    }\n\n    // Token expired → try to refresh\n    const data = await authService.refreshToken(email, refreshToken);\n    localStorage.setItem('authToken', data.tokens.AccessToken);\n    localStorage.setItem('idToken', data.tokens.IdToken || '');\n    toast.success('Session refreshed');\n    return true;\n  } catch (err) {\n    console.error('Token refresh failed:', err.message);\n    toast.error('Session expired. Please log in again.');\n    logout();\n    return false;\n  }\n};\nexport const logout = () => {\n  localStorage.removeItem('authToken');\n  localStorage.removeItem('refreshToken');\n  localStorage.removeItem('userEmail');\n};","map":{"version":3,"names":["jwtDecode","authService","toast","isAuthenticated","token","localStorage","getItem","decoded","Date","now","exp","checkAndRefreshAuth","email","refreshToken","data","setItem","tokens","AccessToken","IdToken","success","err","console","error","message","logout","removeItem"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/utils/auth.js"],"sourcesContent":["import { jwtDecode } from 'jwt-decode';\nimport authService from '../services/authService';\nimport { toast } from 'react-toastify';\n\n// Synchronous check — fast, used in routes\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('authToken');\n  if (!token) return false;\n\n  try {\n    const decoded = jwtDecode(token);\n    return Date.now() < decoded.exp * 1000;\n  } catch {\n    return false;\n  }\n};\n\n// Async version — try refreshing token if expired\nexport const checkAndRefreshAuth = async () => {\n  const token = localStorage.getItem('authToken');\n  const email = localStorage.getItem('userEmail');\n  const refreshToken = localStorage.getItem('refreshToken');\n\n  if (!token || !email || !refreshToken) return false;\n\n  try {\n    const decoded = jwtDecode(token);\n\n    if (Date.now() < decoded.exp * 1000) {\n      // Token still valid\n      return true;\n    }\n\n    // Token expired → try to refresh\n    const data = await authService.refreshToken(email, refreshToken);\n    localStorage.setItem('authToken', data.tokens.AccessToken);\n    localStorage.setItem('idToken', data.tokens.IdToken || '');\n    toast.success('Session refreshed');\n    return true;\n  } catch (err) {\n    console.error('Token refresh failed:', err.message);\n    toast.error('Session expired. Please log in again.');\n    logout();\n    return false;\n  }\n};\n\nexport const logout = () => {\n  localStorage.removeItem('authToken');\n  localStorage.removeItem('refreshToken');\n  localStorage.removeItem('userEmail');\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,OAAOC,WAAW,MAAM,yBAAyB;AACjD,SAASC,KAAK,QAAQ,gBAAgB;;AAEtC;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAI,CAACF,KAAK,EAAE,OAAO,KAAK;EAExB,IAAI;IACF,MAAMG,OAAO,GAAGP,SAAS,CAACI,KAAK,CAAC;IAChC,OAAOI,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,OAAO,CAACG,GAAG,GAAG,IAAI;EACxC,CAAC,CAAC,MAAM;IACN,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,MAAMP,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,MAAMM,KAAK,GAAGP,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,MAAMO,YAAY,GAAGR,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAEzD,IAAI,CAACF,KAAK,IAAI,CAACQ,KAAK,IAAI,CAACC,YAAY,EAAE,OAAO,KAAK;EAEnD,IAAI;IACF,MAAMN,OAAO,GAAGP,SAAS,CAACI,KAAK,CAAC;IAEhC,IAAII,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,OAAO,CAACG,GAAG,GAAG,IAAI,EAAE;MACnC;MACA,OAAO,IAAI;IACb;;IAEA;IACA,MAAMI,IAAI,GAAG,MAAMb,WAAW,CAACY,YAAY,CAACD,KAAK,EAAEC,YAAY,CAAC;IAChER,YAAY,CAACU,OAAO,CAAC,WAAW,EAAED,IAAI,CAACE,MAAM,CAACC,WAAW,CAAC;IAC1DZ,YAAY,CAACU,OAAO,CAAC,SAAS,EAAED,IAAI,CAACE,MAAM,CAACE,OAAO,IAAI,EAAE,CAAC;IAC1DhB,KAAK,CAACiB,OAAO,CAAC,mBAAmB,CAAC;IAClC,OAAO,IAAI;EACb,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAACG,OAAO,CAAC;IACnDrB,KAAK,CAACoB,KAAK,CAAC,uCAAuC,CAAC;IACpDE,MAAM,CAAC,CAAC;IACR,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAMA,MAAM,GAAGA,CAAA,KAAM;EAC1BnB,YAAY,CAACoB,UAAU,CAAC,WAAW,CAAC;EACpCpB,YAAY,CAACoB,UAAU,CAAC,cAAc,CAAC;EACvCpB,YAAY,CAACoB,UAAU,CAAC,WAAW,CAAC;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}