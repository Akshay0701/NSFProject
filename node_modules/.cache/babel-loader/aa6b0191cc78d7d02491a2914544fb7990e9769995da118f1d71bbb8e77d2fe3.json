{"ast":null,"code":"import roomService from'../services/roomService';import computingService from'../services/computingService';import{useEffect,useState,useCallback}from'react';import{useNavigate,useParams}from'react-router-dom';import{toast}from'react-toastify';const useRoomPage=()=>{const navigate=useNavigate();const{roomId}=useParams();const[room,setRoom]=useState(null);const[loading,setLoading]=useState(true);const[extracting,setExtracting]=useState(false);const[showModal,setShowModal]=useState(false);const[inputMethod,setInputMethod]=useState('description');const[formData,setFormData]=useState({name:'',email:'',description:'',pdfFile:null});const userEmail=localStorage.getItem('userEmail');const fetchRoomData=useCallback(async roomId=>{try{const data=await roomService.getRoomData(roomId);console.log('data at useRoom page:',data);return data;}catch(err){console.error(err);toast.error('Failed to load room data.');return null;}},[]);const extractTextFromPDF=useCallback(async pdfFile=>{try{const data=await computingService.extractTextFromPDF(pdfFile);return data.text;// expects { text: '...' }\n}catch(err){console.error(err);toast.error('Failed to extract text from PDF.');return'';}},[]);const extractTextFromLink=useCallback(async link=>{try{const data=await computingService.extractTextFromLink(link);return data.text;// expects { text: '...' }\n}catch(err){console.error(err);toast.error('Failed to extract text from PDF.');return'';}},[]);const removeProfile=useCallback(async _ref=>{let{roomID,email,senderEmail}=_ref;try{const result=await roomService.removeProfileFromRoom({roomID,email,senderEmail});toast.success('Profile removed successfully.');return result;}catch(err){console.error(err);toast.error('Failed to remove profile.');throw err;}},[]);const addProfile=useCallback(async _ref2=>{let{roomID,name,email,description}=_ref2;try{const result=await roomService.addProfileToRoom({roomID,name,email,description});toast.success('Profile added successfully.');return result;}catch(err){console.error(err);toast.error('Failed to add profile.');throw err;}},[]);const extracted_keywords=useCallback(async roomID=>{try{const data=await computingService.extractResearchKeywords(roomID);navigate(`/room/${roomID}/profiles`);}catch(err){console.error(err);toast.error('Failed to extract keywords from room.');return[];}},[]);const fetchTeams=useCallback(async roomID=>{try{const data=await roomService.getTeamsByRoom(roomID);return data;}catch(err){console.error(err);toast.error('Failed to load teams data');return[];}},[]);const loadRoom=useCallback(async()=>{setLoading(true);const data=await fetchRoomData(roomId);setRoom(data);setLoading(false);},[fetchRoomData,roomId]);useEffect(()=>{loadRoom();},[loadRoom]);const handleExtractResearch=async()=>{try{setExtracting(true);const keywords=await extracted_keywords(roomId);if(!keywords.length){toast.error('No research keywords extracted.');}}catch(err){toast.error('Failed to extract research interests.');}finally{setExtracting(false);}};const handleDeleteProfile=async emailToRemove=>{if(!window.confirm('Are you sure you want to remove this profile?'))return;try{await removeProfile({roomID:roomId,email:emailToRemove,senderEmail:userEmail});await loadRoom();}catch(error){toast.error('Failed to remove profile.');}};const handleInputChange=e=>{const{name,value,files}=e.target;if(name==='pdfFile'){setFormData(prev=>({...prev,pdfFile:files[0]}));}else{setFormData(prev=>({...prev,[name]:value}));}};const handleAddProfile=async e=>{e.preventDefault();const{name,email,description,pdfFile,websiteLink}=formData;// Validate required fields\nconst isInvalid=!name||!email||inputMethod==='description'&&!description||inputMethod==='pdf'&&!pdfFile||inputMethod==='link'&&!websiteLink;if(isInvalid){toast.error('Please fill in all required fields');return;}try{let finalDescription=description;// If using PDF input\nif(inputMethod==='pdf'&&pdfFile){const extractedText=await extractTextFromPDF(pdfFile);if(!extractedText){toast.error('Failed to extract text from PDF.');return;}finalDescription=extractedText;}// If using Link input\nif(inputMethod==='link'&&websiteLink){try{const extractedText=await extractTextFromLink(websiteLink);if(!extractedText){toast.error('Failed to extract text from the website.');return;}finalDescription=extractedText;}catch(err){toast.error('Error extracting text from the link.');return;}}await addProfile({roomID:roomId,name,email,description:finalDescription});await loadRoom();setShowModal(false);setFormData({name:'',email:'',description:'',pdfFile:null,websiteLink:''});}catch(err){console.error('Error adding profile:',err);toast.error('Failed to add profile. Please try again.');}};return{roomId,room,setRoom,userEmail,loading,extracting,showModal,setShowModal,inputMethod,setInputMethod,formData,setFormData,handleAddProfile,handleDeleteProfile,handleInputChange,handleExtractResearch,fetchTeams};};export default useRoomPage;","map":{"version":3,"names":["roomService","computingService","useEffect","useState","useCallback","useNavigate","useParams","toast","useRoomPage","navigate","roomId","room","setRoom","loading","setLoading","extracting","setExtracting","showModal","setShowModal","inputMethod","setInputMethod","formData","setFormData","name","email","description","pdfFile","userEmail","localStorage","getItem","fetchRoomData","data","getRoomData","console","log","err","error","extractTextFromPDF","text","extractTextFromLink","link","removeProfile","_ref","roomID","senderEmail","result","removeProfileFromRoom","success","addProfile","_ref2","addProfileToRoom","extracted_keywords","extractResearchKeywords","fetchTeams","getTeamsByRoom","loadRoom","handleExtractResearch","keywords","length","handleDeleteProfile","emailToRemove","window","confirm","handleInputChange","e","value","files","target","prev","handleAddProfile","preventDefault","websiteLink","isInvalid","finalDescription","extractedText"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFProject/src/hooks/useRoomPage.js"],"sourcesContent":["import roomService from '../services/roomService';\nimport computingService from '../services/computingService';\nimport { useEffect, useState, useCallback } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nconst useRoomPage = () => {\n  const navigate = useNavigate();\n  const { roomId } = useParams();\n  const [room, setRoom] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [extracting, setExtracting] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [inputMethod, setInputMethod] = useState('description');\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    description: '',\n    pdfFile: null,\n  });\n\n  const userEmail = localStorage.getItem('userEmail');\n\n\n  const fetchRoomData = useCallback(async (roomId) => {\n    try {\n      const data = await roomService.getRoomData(roomId);\n      console.log('data at useRoom page:', data);\n      return data;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load room data.');\n      return null;\n    }\n  }, []);\n\n  const extractTextFromPDF = useCallback(async (pdfFile) => {\n    try {\n      const data = await computingService.extractTextFromPDF(pdfFile);\n      return data.text; // expects { text: '...' }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to extract text from PDF.');\n      return '';\n    }\n  }, []);\n\n  const extractTextFromLink = useCallback(async (link) => {\n    try {\n      const data = await computingService.extractTextFromLink(link);\n      return data.text; // expects { text: '...' }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to extract text from PDF.');\n      return '';\n    }\n  }, []);\n\n  const removeProfile = useCallback(async ({ roomID, email, senderEmail }) => {\n    try {\n      const result = await roomService.removeProfileFromRoom({ roomID, email, senderEmail });\n      toast.success('Profile removed successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to remove profile.');\n      throw err;\n    }\n  }, []);\n\n  const addProfile = useCallback(async ({ roomID, name, email, description }) => {\n    try {\n      const result = await roomService.addProfileToRoom({ roomID, name, email, description });\n      toast.success('Profile added successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to add profile.');\n      throw err;\n    }\n  }, []);\n\n  const extracted_keywords = useCallback(async (roomID) => {\n    try {\n      const data = await computingService.extractResearchKeywords(roomID);\n      navigate(`/room/${roomID}/profiles`);\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to extract keywords from room.');\n      return [];\n    }\n  }, []);\n\n  const fetchTeams = useCallback(async (roomID) => {\n    try {\n      const data = await roomService.getTeamsByRoom(roomID);\n      return data; \n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load teams data');\n      return [];\n    }\n  }, []);\n\n  const loadRoom = useCallback(async () => {\n    setLoading(true);\n    const data = await fetchRoomData(roomId);\n    setRoom(data);\n    setLoading(false);\n  }, [fetchRoomData, roomId]);\n\n  useEffect(() => {\n    loadRoom();\n  }, [loadRoom]);\n\n  const handleExtractResearch = async () => {\n    try {\n      setExtracting(true);\n      const keywords = await extracted_keywords(roomId);\n      if (!keywords.length) {\n        toast.error('No research keywords extracted.');\n      }\n    } catch (err) {\n      toast.error('Failed to extract research interests.');\n    } finally {\n      setExtracting(false);\n    }\n  };\n\n  const handleDeleteProfile = async (emailToRemove) => {\n    if (!window.confirm('Are you sure you want to remove this profile?')) return;\n\n    try {\n      await removeProfile({\n        roomID: roomId,\n        email: emailToRemove,\n        senderEmail: userEmail,\n      });\n      await loadRoom();\n    } catch (error) {\n      toast.error('Failed to remove profile.');\n    }\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value, files } = e.target;\n    if (name === 'pdfFile') {\n      setFormData((prev) => ({ ...prev, pdfFile: files[0] }));\n    } else {\n      setFormData((prev) => ({ ...prev, [name]: value }));\n    }\n  };\n\n  const handleAddProfile = async (e) => {\n    e.preventDefault();\n    const { name, email, description, pdfFile, websiteLink } = formData;\n  \n    // Validate required fields\n    const isInvalid =\n      !name ||\n      !email ||\n      (inputMethod === 'description' && !description) ||\n      (inputMethod === 'pdf' && !pdfFile) ||\n      (inputMethod === 'link' && !websiteLink);\n  \n    if (isInvalid) {\n      toast.error('Please fill in all required fields');\n      return;\n    }\n  \n    try {\n      let finalDescription = description;\n  \n      // If using PDF input\n      if (inputMethod === 'pdf' && pdfFile) {\n        const extractedText = await extractTextFromPDF(pdfFile);\n        if (!extractedText) {\n          toast.error('Failed to extract text from PDF.');\n          return;\n        }\n        finalDescription = extractedText;\n      }\n  \n      // If using Link input\n      if (inputMethod === 'link' && websiteLink) {\n        try {\n          const extractedText = await extractTextFromLink(websiteLink);\n          if (!extractedText) {\n            toast.error('Failed to extract text from the website.');\n            return;\n          }\n          finalDescription = extractedText;\n        } catch (err) {\n          toast.error('Error extracting text from the link.');\n          return;\n        }\n      }\n  \n      await addProfile({ roomID: roomId, name, email, description: finalDescription });\n      await loadRoom();\n  \n      setShowModal(false);\n      setFormData({ name: '', email: '', description: '', pdfFile: null, websiteLink: '' });\n  \n    } catch (err) {\n      console.error('Error adding profile:', err);\n      toast.error('Failed to add profile. Please try again.');\n    }\n  };  \n\n  return {\n    roomId,\n    room,\n    setRoom,\n    userEmail,\n    loading,\n    extracting,\n    showModal,\n    setShowModal,\n    inputMethod,\n    setInputMethod,\n    formData,\n    setFormData,\n    handleAddProfile,\n    handleDeleteProfile,\n    handleInputChange,\n    handleExtractResearch,\n    fetchTeams,\n  };\n};\n\nexport default useRoomPage;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}