{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useIntroPage.js\nimport { use, useCallback, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport roomService from '../services/roomService';\nconst useIntroPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [roomID, setRoomID] = useState('');\n  const [error, setError] = useState('');\n  const [userRooms, setUserRooms] = useState([]);\n  const [joinedRooms, setJoinedRooms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const userEmail = localStorage.getItem('userEmail');\n  const createRoom = useCallback(async creatorID => {\n    try {\n      const result = await roomService.createRoom(creatorID);\n      toast.success('Room created successfully.');\n      return result; // { message, RoomID }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to create room.');\n      throw err;\n    }\n  }, []);\n  const getRoomsByEmail = useCallback(async email => {\n    try {\n      const data = await roomService.getRoomsByEmail(email);\n      return data.rooms || [];\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to fetch rooms by email.');\n      return [];\n    }\n  }, []);\n  const getJoinedRoomsByEmail = useCallback(async email => {\n    try {\n      const data = await roomService.getJoinedRoomsByEmail(email);\n      return data.rooms || [];\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to fetch rooms by email.');\n      return [];\n    }\n  }, []);\n  const removeRoom = useCallback(async ({\n    roomID,\n    email\n  }) => {\n    try {\n      const result = await roomService.removeRoomData({\n        roomID,\n        email\n      });\n      toast.success('Room removed successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to remove room.');\n      throw err;\n    }\n  }, []);\n  const fetchRooms = useCallback(async () => {\n    if (!userEmail) {\n      toast.error('Please log in to view your rooms');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const rooms = await getRoomsByEmail(userEmail);\n      const joinedrooms = await getJoinedRoomsByEmail(userEmail);\n      setUserRooms(rooms);\n      setJoinedRooms(joinedrooms);\n    } catch {\n      toast.error('Could not fetch rooms');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [userEmail, getRoomsByEmail]);\n  const handleJoinRoom = () => {\n    const trimmedID = roomID.trim();\n    if (!trimmedID) {\n      setError('Please enter a Room ID');\n      return;\n    }\n    setError('');\n    navigate(`/room/${trimmedID}`);\n  };\n  const handleCreateRoom = async () => {\n    if (!userEmail) {\n      toast.error('Please log in to create a room');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const res = await createRoom(userEmail);\n      const newRoomId = res.RoomID;\n      navigate(`/room/${newRoomId}`);\n    } catch {\n      toast.error('Failed to create room. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleDeleteRoom = async roomID => {\n    if (!window.confirm('Are you sure you want to delete this room?')) return;\n    try {\n      await removeRoom({\n        roomID,\n        email: userEmail\n      });\n      fetchRooms();\n    } catch {\n      toast.error('Failed to delete room');\n    }\n  };\n  useEffect(() => {\n    fetchRooms();\n  }, [fetchRooms]);\n  return {\n    roomID,\n    setRoomID,\n    error,\n    setError,\n    isLoading,\n    userRooms,\n    joinedRooms,\n    handleJoinRoom,\n    handleCreateRoom,\n    handleDeleteRoom\n  };\n};\n_s(useIntroPage, \"vdq9OXFno7gEM2brovcwuZQ4Xbo=\", false, function () {\n  return [useNavigate];\n});\nexport default useIntroPage;","map":{"version":3,"names":["use","useCallback","useEffect","useState","useNavigate","toast","roomService","useIntroPage","_s","navigate","roomID","setRoomID","error","setError","userRooms","setUserRooms","joinedRooms","setJoinedRooms","isLoading","setIsLoading","userEmail","localStorage","getItem","createRoom","creatorID","result","success","err","console","getRoomsByEmail","email","data","rooms","getJoinedRoomsByEmail","removeRoom","removeRoomData","fetchRooms","joinedrooms","handleJoinRoom","trimmedID","trim","handleCreateRoom","res","newRoomId","RoomID","handleDeleteRoom","window","confirm"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/hooks/useIntroPage.js"],"sourcesContent":["// src/hooks/useIntroPage.js\nimport { use, useCallback, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport roomService from '../services/roomService';\n\nconst useIntroPage = () => {\n  const navigate = useNavigate();\n  const [roomID, setRoomID] = useState('');\n  const [error, setError] = useState('');\n  const [userRooms, setUserRooms] = useState([]);\n  const [joinedRooms, setJoinedRooms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const userEmail = localStorage.getItem('userEmail');\n\n  const createRoom = useCallback(async (creatorID) => {\n    try {\n      const result = await roomService.createRoom(creatorID);\n      toast.success('Room created successfully.');\n      return result; // { message, RoomID }\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to create room.');\n      throw err;\n    }\n  }, []);\n\n  const getRoomsByEmail = useCallback(async (email) => {\n    try {\n      const data = await roomService.getRoomsByEmail(email);\n      return data.rooms || [];\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to fetch rooms by email.');\n      return [];\n    }\n  }, []);\n\n  const getJoinedRoomsByEmail = useCallback(async (email) => {\n    try {\n      const data = await roomService.getJoinedRoomsByEmail(email);\n      return data.rooms || [];\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to fetch rooms by email.');\n      return [];\n    }\n  }, []);\n\n\n  const removeRoom = useCallback(async ({roomID, email}) => {\n    try {\n      const result = await roomService.removeRoomData({ roomID, email});\n      toast.success('Room removed successfully.');\n      return result;\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to remove room.');\n      throw err;\n    }\n  }, [])\n\n  const fetchRooms = useCallback(async () => {\n    if (!userEmail) {\n      toast.error('Please log in to view your rooms');\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const rooms = await getRoomsByEmail(userEmail);\n      const joinedrooms = await getJoinedRoomsByEmail(userEmail);\n      setUserRooms(rooms);\n      setJoinedRooms(joinedrooms)\n    } catch {\n      toast.error('Could not fetch rooms');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [userEmail, getRoomsByEmail]);\n\n  const handleJoinRoom = () => {\n    const trimmedID = roomID.trim();\n    if (!trimmedID) {\n      setError('Please enter a Room ID');\n      return;\n    }\n    setError('');\n    navigate(`/room/${trimmedID}`);\n  };\n\n  const handleCreateRoom = async () => {\n    if (!userEmail) {\n      toast.error('Please log in to create a room');\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const res = await createRoom(userEmail);\n      const newRoomId = res.RoomID;\n      navigate(`/room/${newRoomId}`);\n    } catch {\n      toast.error('Failed to create room. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDeleteRoom = async (roomID) => {\n    if (!window.confirm('Are you sure you want to delete this room?')) return;\n    try {\n      await removeRoom({ roomID, email: userEmail });\n      fetchRooms();\n    } catch {\n      toast.error('Failed to delete room');\n    }\n  };\n\n  useEffect(() => {\n    fetchRooms();\n  }, [fetchRooms]);\n\n  return {\n    roomID,\n    setRoomID,\n    error,\n    setError,\n    isLoading,\n    userRooms,\n    joinedRooms,\n    handleJoinRoom,\n    handleCreateRoom,\n    handleDeleteRoom\n  };\n};\n\nexport default useIntroPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}