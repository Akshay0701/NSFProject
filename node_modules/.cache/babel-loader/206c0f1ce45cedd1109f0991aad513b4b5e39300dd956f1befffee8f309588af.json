{"ast":null,"code":"const BASE_URL='api/nsf/room';const generateProposalsForRoom=async roomID=>{const response=await fetch(`${BASE_URL}/generate-proposals`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({RoomID:roomID})});if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to generate proposals');}return response.json();// { teams: [...] }\n};const getExtractedKeywords=async roomID=>{const response=await fetch(`${BASE_URL}/get-extracted-keywords`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({RoomID:roomID})});if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to get extracted keywords');}return await response.json();};const extractResearchKeywords=async roomID=>{const response=await fetch(`${BASE_URL}/extract-keywords`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({RoomID:roomID})});if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to extract research keywords');}return response.json();// { extracted_keywords: [...] }\n};const extractTextFromPDF=async pdfFile=>{const formData=new FormData();formData.append('pdf',pdfFile);const response=await fetch(`${BASE_URL}/extract-pdf-text`,{method:'POST',body:formData});if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to extract text from PDF');}return response.json();};const extractTextFromLink=async link=>{const response=await fetch(`${BASE_URL}/extract-link-text`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({url:link})});if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to extract research keywords');}return response.json();// { url: [...], text : \"\" }\n};export default{extractTextFromPDF,extractResearchKeywords,generateProposalsForRoom,getExtractedKeywords,extractTextFromLink};","map":{"version":3,"names":["BASE_URL","generateProposalsForRoom","roomID","response","fetch","method","headers","body","JSON","stringify","RoomID","ok","error","json","Error","getExtractedKeywords","extractResearchKeywords","extractTextFromPDF","pdfFile","formData","FormData","append","extractTextFromLink","link","url"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFProject/src/services/computingService.js"],"sourcesContent":["const BASE_URL = 'api/nsf/room';\n\nconst generateProposalsForRoom = async (roomID) => {\n  const response = await fetch(`${BASE_URL}/generate-proposals`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to generate proposals');\n  }\n\n  return response.json();  // { teams: [...] }\n};\n\nconst getExtractedKeywords = async (roomID) => {\n  const response = await fetch(`${BASE_URL}/get-extracted-keywords`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to get extracted keywords');\n  }\n\n  return await response.json();\n};\n\nconst extractResearchKeywords = async (roomID) => {\n  const response = await fetch(`${BASE_URL}/extract-keywords`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to extract research keywords');\n  }\n\n  return response.json();  // { extracted_keywords: [...] }\n};\n\nconst extractTextFromPDF = async (pdfFile) => {\n  const formData = new FormData();\n  formData.append('pdf', pdfFile);\n\n  const response = await fetch(`${BASE_URL}/extract-pdf-text`, {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to extract text from PDF');\n  }\n\n  return response.json(); \n};\n\nconst extractTextFromLink = async (link) => {\n  const response = await fetch(`${BASE_URL}/extract-link-text`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ url: link }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to extract research keywords');\n  }\n\n  return response.json();  // { url: [...], text : \"\" }\n};\n\nexport default {\n  extractTextFromPDF,\n  extractResearchKeywords,\n  generateProposalsForRoom,\n  getExtractedKeywords,\n  extractTextFromLink,\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}