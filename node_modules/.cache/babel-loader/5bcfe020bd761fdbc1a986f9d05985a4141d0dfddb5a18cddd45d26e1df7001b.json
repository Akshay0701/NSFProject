{"ast":null,"code":"const BASE_URL = 'http://127.0.0.1:5000/room';\nconst getRoomData = async roomId => {\n  const response = await fetch(`${BASE_URL}/get-room/${roomId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch room data');\n  }\n  return await response.json();\n};\nconst addProfileToRoom = async ({\n  roomID,\n  name,\n  email,\n  description\n}) => {\n  const response = await fetch(`${BASE_URL}/add-profile`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID,\n      name,\n      email,\n      description\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to add profile to room');\n  }\n  return response.json();\n};\nconst removeProfileFromRoom = async ({\n  roomID,\n  email\n}) => {\n  const response = await fetch(`${BASE_URL}/remove-profile`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID,\n      email\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to remove profile from room');\n  }\n  return response.json();\n};\nconst extractTextFromPDF = async pdfFile => {\n  const formData = new FormData();\n  formData.append('pdf', pdfFile);\n  const response = await fetch(`${BASE_URL}/extract-pdf-text`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to extract text from PDF');\n  }\n  return response.json();\n};\nconst createRoom = async creatorID => {\n  const response = await fetch(`${BASE_URL}/create-room`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      creator_id: creatorID\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to create room');\n  }\n  return response.json(); // { message: \"...\", RoomID: \"...\" }\n};\nexport default {\n  getRoomData,\n  addProfileToRoom,\n  removeProfileFromRoom,\n  extractTextFromPDF,\n  createRoom\n};","map":{"version":3,"names":["BASE_URL","getRoomData","roomId","response","fetch","ok","Error","json","addProfileToRoom","roomID","name","email","description","method","headers","body","JSON","stringify","RoomID","error","removeProfileFromRoom","extractTextFromPDF","pdfFile","formData","FormData","append","createRoom","creatorID","creator_id"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/services/roomService.js"],"sourcesContent":["const BASE_URL = 'http://127.0.0.1:5000/room';\n\nconst getRoomData = async (roomId) => {\n  const response = await fetch(`${BASE_URL}/get-room/${roomId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch room data');\n  }\n  return await response.json();\n};\n\nconst addProfileToRoom = async ({ roomID, name, email, description }) => {\n  const response = await fetch(`${BASE_URL}/add-profile`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID, name, email, description }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to add profile to room');\n  }\n\n  return response.json();\n};\n\nconst removeProfileFromRoom = async ({ roomID, email }) => {\n  const response = await fetch(`${BASE_URL}/remove-profile`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID, email }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to remove profile from room');\n  }\n\n  return response.json();\n};\n\nconst extractTextFromPDF = async (pdfFile) => {\n  const formData = new FormData();\n  formData.append('pdf', pdfFile);\n\n  const response = await fetch(`${BASE_URL}/extract-pdf-text`, {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to extract text from PDF');\n  }\n\n  return response.json(); \n};\n\nconst createRoom = async (creatorID) => {\n  const response = await fetch(`${BASE_URL}/create-room`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ creator_id: creatorID }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to create room');\n  }\n\n  return response.json();  // { message: \"...\", RoomID: \"...\" }\n};\n\nexport default {\n  getRoomData,\n  addProfileToRoom,\n  removeProfileFromRoom,\n  extractTextFromPDF, \n  createRoom,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}