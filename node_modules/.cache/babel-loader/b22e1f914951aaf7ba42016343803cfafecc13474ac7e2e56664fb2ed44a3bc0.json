{"ast":null,"code":"const BASE_URL = 'http://127.0.0.1:5000/room';\nconst getRoomData = async roomId => {\n  const response = await fetch(`${BASE_URL}/get-room/${roomId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch room data');\n  }\n  return await response.json();\n};\nconst addProfileToRoom = async ({\n  roomID,\n  name,\n  email,\n  description,\n  pdfFile\n}) => {\n  const formData = new FormData();\n  formData.append('RoomID', roomID);\n  formData.append('name', name);\n  formData.append('email', email);\n  if (pdfFile) {\n    formData.append('pdf', pdfFile); // Attach PDF file\n  } else if (description) {\n    formData.append('description', description); // Use fallback description\n  }\n  const response = await fetch(`${BASE_URL}/add-profile`, {\n    method: 'POST',\n    body: formData // No headers needed; browser sets boundary\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to add profile to room');\n  }\n  return response.json();\n};\nconst removeProfileFromRoom = async ({\n  roomID,\n  email\n}) => {\n  const response = await fetch(`${BASE_URL}/remove-profile`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      RoomID: roomID,\n      email\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to remove profile from room');\n  }\n  return response.json();\n};\nexport default {\n  getRoomData,\n  addProfileToRoom,\n  removeProfileFromRoom\n};","map":{"version":3,"names":["BASE_URL","getRoomData","roomId","response","fetch","ok","Error","json","addProfileToRoom","roomID","name","email","description","pdfFile","formData","FormData","append","method","body","error","removeProfileFromRoom","headers","JSON","stringify","RoomID"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFResearchLocal/src/services/roomService.js"],"sourcesContent":["const BASE_URL = 'http://127.0.0.1:5000/room';\n\nconst getRoomData = async (roomId) => {\n    const response = await fetch(`${BASE_URL}/get-room/${roomId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch room data');\n    }\n    return await response.json();\n};\n\nconst addProfileToRoom = async ({ roomID, name, email, description, pdfFile }) => {\n  const formData = new FormData();\n  formData.append('RoomID', roomID);\n  formData.append('name', name);\n  formData.append('email', email);\n\n  if (pdfFile) {\n    formData.append('pdf', pdfFile); // Attach PDF file\n  } else if (description) {\n    formData.append('description', description); // Use fallback description\n  }\n\n  const response = await fetch(`${BASE_URL}/add-profile`, {\n    method: 'POST',\n    body: formData, // No headers needed; browser sets boundary\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to add profile to room');\n  }\n\n  return response.json();\n};\n\nconst removeProfileFromRoom = async ({ roomID, email }) => {\n  const response = await fetch(`${BASE_URL}/remove-profile`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ RoomID: roomID, email }),\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to remove profile from room');\n  }\n\n  return response.json();\n};\n\nexport default {\n  getRoomData,\n  addProfileToRoom,\n  removeProfileFromRoom,\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,4BAA4B;AAE7C,MAAMC,WAAW,GAAG,MAAOC,MAAM,IAAK;EAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,aAAaE,MAAM,EAAE,CAAC;EAC9D,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAChC,CAAC;AAED,MAAMC,gBAAgB,GAAG,MAAAA,CAAO;EAAEC,MAAM;EAAEC,IAAI;EAAEC,KAAK;EAAEC,WAAW;EAAEC;AAAQ,CAAC,KAAK;EAChF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEP,MAAM,CAAC;EACjCK,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEN,IAAI,CAAC;EAC7BI,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEL,KAAK,CAAC;EAE/B,IAAIE,OAAO,EAAE;IACXC,QAAQ,CAACE,MAAM,CAAC,KAAK,EAAEH,OAAO,CAAC,CAAC,CAAC;EACnC,CAAC,MAAM,IAAID,WAAW,EAAE;IACtBE,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEJ,WAAW,CAAC,CAAC,CAAC;EAC/C;EAEA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,cAAc,EAAE;IACtDiB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEJ,QAAQ,CAAE;EAClB,CAAC,CAAC;EAEF,IAAI,CAACX,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMc,KAAK,GAAG,MAAMhB,QAAQ,CAACI,IAAI,CAAC,CAAC;IACnC,MAAM,IAAID,KAAK,CAACa,KAAK,CAACA,KAAK,IAAI,+BAA+B,CAAC;EACjE;EAEA,OAAOhB,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,MAAMa,qBAAqB,GAAG,MAAAA,CAAO;EAAEX,MAAM;EAAEE;AAAM,CAAC,KAAK;EACzD,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,iBAAiB,EAAE;IACzDiB,MAAM,EAAE,MAAM;IACdI,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CH,IAAI,EAAEI,IAAI,CAACC,SAAS,CAAC;MAAEC,MAAM,EAAEf,MAAM;MAAEE;IAAM,CAAC;EAChD,CAAC,CAAC;EAEF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMc,KAAK,GAAG,MAAMhB,QAAQ,CAACI,IAAI,CAAC,CAAC;IACnC,MAAM,IAAID,KAAK,CAACa,KAAK,CAACA,KAAK,IAAI,oCAAoC,CAAC;EACtE;EAEA,OAAOhB,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,eAAe;EACbN,WAAW;EACXO,gBAAgB;EAChBY;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}