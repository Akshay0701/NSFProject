{"ast":null,"code":"import{useNavigate}from'react-router-dom';import{useState}from'react';import{toast}from'react-toastify';// Add toast for error handling\nimport useProfileStore from'../store/profileStore';import nsfService from'../services/nsfService';const useExtractInterests=()=>{const[isLoading,setIsLoadingState]=useState(false);const navigate=useNavigate();const{setExtractedProfiles,setIsLoading}=useProfileStore();const extractInterests=async profiles=>{setIsLoadingState(true);setIsLoading(true);try{const data=await nsfService.extractInterests(profiles);setExtractedProfiles(data);// Store the extracted profiles in Zustand\nnavigate('/profiles');}catch(error){console.error(error);toast.error('Error extracting research interests. Please try again.');}finally{setIsLoadingState(false);setIsLoading(false);}};return{extractInterests,isLoading};};export default useExtractInterests;","map":{"version":3,"names":["useNavigate","useState","toast","useProfileStore","nsfService","useExtractInterests","isLoading","setIsLoadingState","navigate","setExtractedProfiles","setIsLoading","extractInterests","profiles","data","error","console"],"sources":["/Users/akshayjadhav/Documents/GitHub/NSFProject/src/hooks/useExtractInterests.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify'; // Add toast for error handling\nimport useProfileStore from '../store/profileStore';\nimport nsfService from '../services/nsfService';\n\nconst useExtractInterests = () => {\n  const [isLoading, setIsLoadingState] = useState(false);\n  const navigate = useNavigate();\n  const { setExtractedProfiles, setIsLoading } = useProfileStore();\n\n  const extractInterests = async (profiles) => {\n    setIsLoadingState(true);\n    setIsLoading(true);\n\n    try {\n      const data = await nsfService.extractInterests(profiles);\n      setExtractedProfiles(data); // Store the extracted profiles in Zustand\n      navigate('/profiles');\n    } catch (error) {\n      console.error(error);\n      toast.error('Error extracting research interests. Please try again.');\n    } finally {\n      setIsLoadingState(false);\n      setIsLoading(false);\n    }\n  };\n\n  return { extractInterests, isLoading };\n};\n\nexport default useExtractInterests;"],"mappings":"AAAA,OAASA,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,QAAQ,KAAQ,OAAO,CAChC,OAASC,KAAK,KAAQ,gBAAgB,CAAE;AACxC,MAAO,CAAAC,eAAe,KAAM,uBAAuB,CACnD,MAAO,CAAAC,UAAU,KAAM,wBAAwB,CAE/C,KAAM,CAAAC,mBAAmB,CAAGA,CAAA,GAAM,CAChC,KAAM,CAACC,SAAS,CAAEC,iBAAiB,CAAC,CAAGN,QAAQ,CAAC,KAAK,CAAC,CACtD,KAAM,CAAAO,QAAQ,CAAGR,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAES,oBAAoB,CAAEC,YAAa,CAAC,CAAGP,eAAe,CAAC,CAAC,CAEhE,KAAM,CAAAQ,gBAAgB,CAAG,KAAO,CAAAC,QAAQ,EAAK,CAC3CL,iBAAiB,CAAC,IAAI,CAAC,CACvBG,YAAY,CAAC,IAAI,CAAC,CAElB,GAAI,CACF,KAAM,CAAAG,IAAI,CAAG,KAAM,CAAAT,UAAU,CAACO,gBAAgB,CAACC,QAAQ,CAAC,CACxDH,oBAAoB,CAACI,IAAI,CAAC,CAAE;AAC5BL,QAAQ,CAAC,WAAW,CAAC,CACvB,CAAE,MAAOM,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CACpBZ,KAAK,CAACY,KAAK,CAAC,wDAAwD,CAAC,CACvE,CAAC,OAAS,CACRP,iBAAiB,CAAC,KAAK,CAAC,CACxBG,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,MAAO,CAAEC,gBAAgB,CAAEL,SAAU,CAAC,CACxC,CAAC,CAED,cAAe,CAAAD,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}